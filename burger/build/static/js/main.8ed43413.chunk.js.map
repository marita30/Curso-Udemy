{"version":3,"sources":["components/Burger/BurgerIngredient/BurgerIngredient.css","components/Navigation/SideDrawer/SideDrawer.css","components/Burger/BuildControls/BuildControl/BuildControl.css","components/UI/Input/Input.css","components/Navigation/Toolbar/Toolbar.css","components/Navigation/NavigationItems/NavigationItem/NavigationItem.css","components/Burger/BuildControls/BuildControls.css","components/UI/Button/Button.css","hoc/Layout/Layout.css","assets/images/burger.png","components/Logo/Logo.css","components/Navigation/NavigationItems/NavigationItems.css","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.css","components/UI/Backdrop/Backdrop.css","components/Burger/Burger.css","components/UI/Modal/Modal.css","components/UI/Spinner/Spinner.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","containers/Auth/Auth.css","components/Order/Order.css","hoc/Aux/Aux.js","components/Logo/Logo.js","components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.js","components/Navigation/Toolbar/Toolbar.js","components/UI/Backdrop/Backdrop.js","components/Navigation/SideDrawer/SideDrawer.js","hoc/Layout/Layout.js","components/Burger/BurgerIngredient/BurgerIngredient.js","components/Burger/Burger.js","components/Burger/BuildControls/BuildControl/BuildControl.js","components/Burger/BuildControls/BuildControls.js","components/UI/Modal/Modal.js","components/UI/Button/Button.js","components/Burger/OrderSummary/OrderSummary.js","axios-orders.js","store/actions/auth.js","store/actions/actionTypes.js","components/UI/Spinner/Spinner.js","hoc/withErrorHandler/withErrorHandler.js","containers/BurgerBuilder/BurgerBuilder.js","store/actions/burgerBuilder.js","store/actions/order.js","components/Order/CheckoutSummary/CheckoutSummary.js","components/UI/Input/Input.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","containers/Auth/Auth.js","containers/Auth/Logout/Logout.js","components/Order/Order.js","containers/Orders/Orders.js","App.js","serviceWorker.js","store/reducers/burgerBuilder.js","store/reducers/order.js","store/reducers/auth.js","index.js"],"names":["module","exports","aux","props","children","logo","className","classes","Logo","style","height","src","burgerLogo","alt","navigationItem","NavigationItem","to","link","exact","activeClassName","active","navigationItems","NavigationItems","isAuthenticated","drawerToggle","DrawerToggle","onClick","clicked","toolbar","Toolbar","drawerToggleClicked","DesktopOnly","isAuth","backdrop","show","Backdrop","sideDrawer","attachedClasses","SideDrawer","Close","open","Open","Aux","closed","join","Layout","state","showSideDrawer","sideDrawerClosedHandler","setState","sideDrawerToggleHandler","prevState","this","Content","Component","connect","auth","token","BurgerIngredient","ingredient","type","BreadBottom","BreadTop","Seeds1","Seeds2","Meat","Cheese","Bacon","Salad","burger","console","log","transformedIngredients","Object","keys","ingredients","map","igKey","Array","_","i","key","reduce","arr","el","concat","length","Burger","buildControl","BuildControl","Label","label","Less","removed","disabled","More","added","controls","buildControls","BuildControls","price","toFixed","ctrl","ingredientAdded","ingredientRemoved","OrderButton","purchasable","ordered","Modal","nextProps","nextState","modalClosed","transform","opacity","button","Button","btnType","OrderSummary","ingredientSummary","textTransform","purchaseCancelled","purchaseContinued","instance","axios","create","baseURL","authSucess","userId","idToken","logout","localStorage","removeItem","checkAuthTimeout","expirationTime","dispatch","setTimeout","setAuthRedirectPath","path","spinner","Loader","withErrorHandler","WrappedComponent","error","errorConfirmedHandler","reqInteceptor","interceptors","request","use","req","resInteceptor","response","res","eject","message","BurgerBuilder","purchasing","purchaseHandler","onSetAuthRedirectPath","history","push","purchaseCancelHandler","purchaseContinueHandler","onInitPurchase","onInitIngredients","sum","disableInfo","ings","Key","orderSummary","onIngredientsAdded","onIngredientsRemoved","updatePurchaseState","burgerBuilder","totalPrice","ingName","ingredientName","get","then","data","catch","actions","checkoutSummary","CheckoutSummary","width","margin","checkoutCancelled","checkoutContinued","input","inputElement","validationError","inputClasses","InputElement","valid","shouldValidate","touched","Invalid","elementType","elementConfig","value","defaultValue","onChange","changed","options","option","displayValue","Input","ContactData","orderForm","name","placeholder","validation","required","street","zipCode","minLength","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","orderData","onOrderBurger","inputChangedHandler","inputIdentifier","updateOrderForm","updateFormElement","target","checkValidity","rules","isValid","trim","formElementsArray","id","config","form","onSubmit","formElement","loading","post","orderId","purchaseBurgerSuccess","purchaseBurgerFail","Checkout","checkoutCancelledHandler","goBack","checkoutContinuedHandler","replace","summary","purchasedRedirect","purchased","match","component","Auth","isEmail","password","isSignup","controlName","updatedControls","submitHandler","onAuth","switchAuthModeHandler","buildingBurger","authRedirectPath","errorMessage","authRedirect","building","authData","returnSecureToken","url","expirationDate","Date","getTime","expiresIn","setItem","localId","authFail","Logout","onLogout","amount","ingredientOutput","ig","display","border","padding","Order","Number","parseFloat","Orders","onGetOrders","orders","queryParams","fetcheOrders","ordersGetFails","withErrorHanlder","App","onAutoLogin","routes","withRouter","getItem","Boolean","window","location","hostname","initialState","INGREDIENT_PRICES","salad","cheese","meat","bacon","reducer","action","newOrder","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","burgerBuilderReducer","orderReducer","authReducer","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,YAAc,uCAAuC,SAAW,oCAAoC,OAAS,kCAAkC,OAAS,kCAAkC,KAAO,gCAAgC,OAAS,kCAAkC,MAAQ,iCAAiC,MAAQ,mC,qBCA/UD,EAAOC,QAAU,CAAC,WAAa,gCAAgC,KAAO,0BAA0B,MAAQ,2BAA2B,KAAO,4B,iBCA1ID,EAAOC,QAAU,CAAC,aAAe,oCAAoC,MAAQ,6BAA6B,KAAO,4BAA4B,KAAO,8B,gBCApJD,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,MAAQ,sBAAsB,aAAe,6BAA6B,QAAU,0B,kBCApID,EAAOC,QAAU,CAAC,QAAU,0BAA0B,KAAO,uBAAuB,YAAc,gC,iBCAlGD,EAAOC,QAAU,CAAC,eAAiB,wCAAwC,OAAS,kC,mBCApFD,EAAOC,QAAU,CAAC,cAAgB,sCAAsC,YAAc,oCAAoC,OAAS,iC,gBCAnID,EAAOC,QAAU,CAAC,OAAS,wBAAwB,QAAU,yBAAyB,OAAS,0B,0BCA/FD,EAAOC,QAAU,CAAC,QAAU,2B,gBCD5BD,EAAOC,QAAU,IAA0B,oC,gBCC3CD,EAAOC,QAAU,CAAC,KAAO,sB,gBCAzBD,EAAOC,QAAU,CAAC,gBAAkB,4C,iBCApCD,EAAOC,QAAU,CAAC,aAAe,sC,gBCAjCD,EAAOC,QAAU,CAAC,SAAW,8B,iBCA7BD,EAAOC,QAAU,CAAC,OAAS,0B,gBCA3BD,EAAOC,QAAU,CAAC,MAAQ,wB,iBCA1BD,EAAOC,QAAU,CAAC,OAAS,yBAAyB,MAAQ,0B,gBCA5DD,EAAOC,QAAU,CAAC,gBAAkB,4C,gBCApCD,EAAOC,QAAU,CAAC,YAAc,oC,gBCAhCD,EAAOC,QAAU,CAAC,KAAO,sB,gBCAzBD,EAAOC,QAAU,CAAC,MAAQ,wB,mNCEXC,EAHH,SAACC,GAAD,OAAWA,EAAMC,U,oECYdC,EARF,SAACF,GAAD,OAET,yBAAKG,UAAWC,IAAQC,KAAMC,MAAO,CAACC,OAAQP,EAAMO,SAChD,yBAAKC,IAAKC,IAAYC,IAAI,e,kCCUlBC,EAXQ,SAACX,GAAD,OAErB,wBAAIG,UAAWC,IAAQQ,gBACpB,kBAAC,IAAD,CACGC,GAAIb,EAAMc,KACVC,MAAOf,EAAMe,MACbC,gBAAiBZ,IAAQa,QAASjB,EAAMC,SAH3C,OCeSiB,EApBS,SAAClB,GAAD,OACpB,wBAAIG,UAAWC,IAAQe,iBACnB,kBAAC,EAAD,CAAgBL,KAAK,IAAIC,OAAK,GAA9B,kBAIEf,EAAMoB,gBACN,kBAAC,EAAD,CAAgBN,KAAK,WAArB,UACA,KAICd,EAAMoB,gBAEP,kBAAC,EAAD,CAAgBN,KAAK,WAArB,YADA,kBAAC,EAAD,CAAgBA,KAAK,SAArB,sB,iBCJKO,EAVM,SAACrB,GAAD,OACjB,yBAAKG,UAAWC,IAAQkB,aAAcC,QAASvB,EAAMwB,SACjD,8BACA,8BACA,gCCcOC,EAfC,SAACzB,GAAD,OACZ,4BAAQG,UAAWC,IAAQsB,SACvB,kBAAC,EAAD,CAAcF,QAASxB,EAAM2B,sBADjC,IAEI,yBAAKxB,UAAWC,IAAQC,MACpB,kBAAC,EAAD,OAEJ,yBAAKF,UAAWC,IAAQwB,aACrB,kBAAC,EAAD,CAAiBR,gBAAiBpB,EAAM6B,SAD3C,O,kCCCOC,EARE,SAAC9B,GAAD,OAEbA,EAAM+B,KAAO,yBAAK5B,UAAWC,IAAQ4B,SAAUT,QAASvB,EAAMwB,SAAjD,MAEJ,MC+BES,EAjCI,SAACjC,GAEhB,IAAKkC,EAAkB,CAAC9B,IAAQ+B,WAAY/B,IAAQgC,OAKpD,OAJIpC,EAAMqC,OACNH,EAAkB,CAAC9B,IAAQ+B,WAAY/B,IAAQkC,OAI/C,kBAAEC,EAAF,KACI,kBAAC,EAAD,CACIR,KAAM/B,EAAMqC,KACZb,QAASxB,EAAMwC,SAHvB,IAMI,yBAAKrC,UAAW+B,EAAgBO,KAAK,KAAMlB,QAASvB,EAAMwC,QAA1D,KAEI,yBAAKrC,UAAWC,IAAQC,MAEpB,kBAAC,EAAD,OAIJ,6BACI,kBAAC,EAAD,CAAiBe,gBAAiBpB,EAAM6B,SAD5C,Q,OClBVa,E,2MAEFC,MAAM,CACFC,gBAAgB,G,EAGpBC,wBAA0B,WACtB,EAAKC,SAAS,CAACF,gBAAgB,K,EAKnCG,wBAA0B,WACtB,EAAKD,UAAS,SAACE,GACX,MAAO,CAACJ,gBAAiBI,EAAUJ,oB,wEAOvC,OACI,kBAACL,EAAD,KAEI,kBAAC,EAAD,CACIV,OAAQoB,KAAKjD,MAAMoB,gBACnBO,oBAAqBsB,KAAKF,0BAE9B,kBAAC,EAAD,CACIlB,OAAQoB,KAAKjD,MAAMoB,gBACnBiB,KAAMY,KAAKN,MAAMC,eACjBJ,OAAQS,KAAKJ,0BAGjB,0BAAM1C,UAAYC,IAAQ8C,SACrBD,KAAKjD,MAAMC,e,GAnCXkD,aAwDNC,eAXS,SAAAT,GACpB,MAAO,CAEHvB,gBAAsC,MAArBuB,EAAMU,KAAKC,SAQrBF,CAAyBV,G,iDCLzBa,E,iLAvDP,IAAIC,EAAa,KAGjB,OAAQP,KAAKjD,MAAMyD,MAGf,IAAM,eACFD,EAAa,yBAAKrD,UAAWC,IAAQsD,cACrC,MAGJ,IAAM,YACFF,EACI,yBAAKrD,UAAWC,IAAQuD,UACpB,yBAAKxD,UAAWC,IAAQwD,SACxB,yBAAKzD,UAAWC,IAAQyD,UAGhC,MAEJ,IAAM,OACFL,EAAa,yBAAKrD,UAAWC,IAAQ0D,OACrC,MAEJ,IAAM,SACFN,EAAa,yBAAKrD,UAAWC,IAAQ2D,SACrC,MAEJ,IAAM,QACFP,EAAa,yBAAKrD,UAAWC,IAAQ4D,QACrC,MAEJ,IAAM,QACFR,EAAa,yBAAKrD,UAAWC,IAAQ6D,QACrC,MAGJ,QACIT,EAAa,KAGvB,OAAOA,M,GA5CkBL,aC0ChBe,EA1CA,SAAClE,GACZmE,QAAQC,IAAIpE,GAIZ,IAAIqE,EAAyBC,OAAOC,KAAKvE,EAAMwE,aAC9CC,KAAI,SAAAC,GAGD,OAAM,YAAIC,MAAM3E,EAAMwE,YAAYE,KAASD,KAAI,SAACG,EAAGC,GAChD,OAAO,kBAAC,EAAD,CAAkBC,IAAKJ,EAAQG,EAAGpB,KAAOiB,UAQtDK,QAAO,SAACC,EAAKC,GACV,OAAOD,EAAIE,OAAOD,KACnB,IAUH,OALsC,IAAlCZ,EAAuBc,SAEvBd,EAAyB,kEAKzB,yBAAKlE,UAAWC,IAAQgF,QACpB,kBAAC,EAAD,CAAkB3B,KAAM,cACvBY,EACD,kBAAC,EAAD,CAAkBZ,KAAM,mB,mCCtBrB4B,GAdM,SAACrF,GAAD,OACjB,yBAAKG,UAAaC,KAAQkF,cACtB,yBAAKnF,UAAaC,KAAQmF,OAAQvF,EAAMwF,OACxC,4BACIrF,UAAaC,KAAQqF,KACrBlE,QAASvB,EAAM0F,QACfC,SAAU3F,EAAM2F,UAHpB,QAFJ,IAMI,4BACIxF,UAAaC,KAAQwF,KACrBrE,QAASvB,EAAM6F,OAFnB,QANJ,UCGEC,GAAW,CACb,CAAEN,MAAO,QAAS/B,KAAM,SACxB,CAAE+B,MAAO,QAAS/B,KAAM,SACxB,CAAE+B,MAAO,SAAU/B,KAAM,UACzB,CAAE+B,MAAO,OAAQ/B,KAAM,SAkCZsC,GA9BO,SAAC/F,GAAD,OAClB,yBAAKG,UAAaC,IAAQ4F,eACtB,6CAAkB,gCAAShG,EAAMiG,MAAMC,QAAQ,KADnD,IAEKJ,GAASrB,KAAI,SAAA0B,GAAI,OAEd,kBAAC,GAAD,CACIrB,IAAMqB,EAAKX,MACXA,MAAOW,EAAKX,MACZK,MAAQ,kBAAM7F,EAAMoG,gBAAgBD,EAAK1C,OACzCiC,QAAW,kBAAM1F,EAAMqG,kBAAkBF,EAAK1C,OAC9CkC,SAAU3F,EAAM2F,SAASQ,EAAK1C,WAGtC,4BACAtD,UAAaC,IAAQkG,YACrBX,UAAY3F,EAAMuG,YAElBhF,QAASvB,EAAMwG,SAAUxG,EAAM6B,OAAS,YAAc,sB,oBCI/C4E,G,8LA5BWC,EAAWC,GACzB,OAAOD,EAAU3E,OAASkB,KAAKjD,MAAM+B,MAAQ2E,EAAUzG,WAAagD,KAAKjD,MAAMC,W,mDAKnFkE,QAAQC,IAAI,wB,+BAIZ,OACI,kBAAC7B,EAAD,KACI,kBAAC,EAAD,CAAUR,KAAMkB,KAAKjD,MAAM+B,KAAMP,QAASyB,KAAKjD,MAAM4G,cADzD,QAEI,yBAAKzG,UAAWC,KAAQqG,MACpBnG,MAAO,CAEHuG,UAAW5D,KAAKjD,MAAM+B,KAAQ,gBAAkB,qBAEhD+E,QAAS7D,KAAKjD,MAAM+B,KAAO,IAAM,MAGpCkB,KAAKjD,MAAMC,e,GAxBZkD,a,oBCaL4D,GAfA,SAAC/G,GAEZ,OADAmE,QAAQC,IAAIpE,GAEJ,4BACA2F,SAAU3F,EAAM2F,SAChBxF,UAAW,CAACC,KAAQ4G,OAAQ5G,KAAQJ,EAAMiH,UAAUxE,KAAK,IACzDlB,QAASvB,EAAMwB,SACjBxB,EAAMC,WC+BDiH,G,qMAjCP/C,QAAQC,IAAI,+B,+BAKN,IAAD,OAEC+C,EAAoB7C,OAAOC,KAAKtB,KAAKjD,MAAMwE,aAChDC,KAAI,SAAAC,GACD,OACI,wBAAII,IAAKJ,GACL,0BAAMpE,MAAO,CAAC8G,cAAe,eAAgB1C,GADjD,KACiE,EAAK1E,MAAMwE,YAAYE,OAIhG,OAEI,kBAACnC,EAAD,KACI,0CACA,iFACA,4BACK4E,GAEL,2BAAG,gDAAsBlE,KAAKjD,MAAMiG,MAAMC,QAAQ,GAA/C,MACH,oDACA,kBAAC,GAAD,CAAQe,QAAQ,SAASzF,QAASyB,KAAKjD,MAAMqH,mBAA7C,WARJ,IASI,kBAAC,GAAD,CAAQJ,QAAQ,UAAUzF,QAASyB,KAAKjD,MAAMsH,mBAA9C,iB,GA9BWnE,a,SCIZoE,G,QANEC,EAAMC,OAAO,CAE1BC,QAAS,yCCOAC,GAAa,SAACrE,EAAOsE,GAC9B,MAAO,CACHnE,KCYmB,cDXnBoE,QAASvE,EACTsE,OAAQA,IAYHE,GAAS,WAKlB,OAHAC,aAAaC,WAAW,SACxBD,aAAaC,WAAW,kBACxBD,aAAaC,WAAW,UACjB,CACHvE,KCNmB,gBDWdwE,GAAmB,SAACC,GAC7B,OAAO,SAAAC,GACHC,YAAW,WACPD,EAASL,QAEO,IAAjBI,KAQEG,GAAsB,SAACC,GAChC,MAAO,CACH7E,KCvB8B,yBDwB9B6E,KAAMA,I,oBE7CCC,GANC,kBACZ,yBAAKpI,UAAWC,KAAQoI,QAAxB,eCmDWC,GAnDU,SAACC,EAAkBlB,GACxC,kNAEI7E,MAAQ,CAEJgG,MAAO,MAJf,EA4BIC,sBAAwB,WAEpB,EAAK9F,SAAS,CAAC6F,MAAO,QA9B9B,2FAQkC,IAAD,OACzB1F,KAAK4F,cAAgBrB,EAAMsB,aAAaC,QAAQC,KAAI,SAAAC,GAEhD,OADA,EAAKnG,SAAS,CAAC6F,MAAO,OACfM,KAGXhG,KAAKiG,cAAgB1B,EAAMsB,aAAaK,SAASH,KAAI,SAAAI,GAAG,OAAIA,KAAK,SAAAT,GAC7D,EAAK7F,SAAS,CAAC6F,MAAOA,SAflC,6CAsBQnB,EAAMsB,aAAaC,QAAQM,MAAMpG,KAAK4F,eACtCrB,EAAMsB,aAAaK,SAASE,MAAMpG,KAAKiG,iBAvB/C,+BAkCQ,OACI,kBAAE3G,EAAF,KACI,kBAAC,GAAD,CACIR,KAAMkB,KAAKN,MAAMgG,MACjB/B,YAAa3D,KAAK2F,uBACjB3F,KAAKN,MAAMgG,MAAQ1F,KAAKN,MAAMgG,MAAMW,QAAU,KAHnD,KAKA,kBAAEZ,EAAqBzF,KAAKjD,OANhC,wBAnCZ,GAAsBmD,cCiBpBoG,G,2MAUF5G,MAAQ,CAEJ6G,YAAY,G,EAgFhBC,gBAAkB,WAEV,EAAKzJ,MAAMoB,gBACX,EAAK0B,SAAS,CAAC0G,YAAY,KAG3B,EAAKxJ,MAAM0J,sBAAsB,aACjC,EAAK1J,MAAM2J,QAAQC,KAAK,W,EAOhCC,sBAAuB,WACnB,EAAK/G,SAAS,CAAC0G,YAAY,K,EAK/BM,wBAA0B,WAqBtB,EAAK9J,MAAM+J,iBACX,EAAK/J,MAAM2J,QAAQC,KAAK,c,mFAjHxB3G,KAAKjD,MAAMgK,sB,0CAKOxF,GAalB,OAXYF,OAAOC,KAAKC,GACnBC,KAAI,SAAAC,GACD,OAAOF,EAAYE,MAG1BK,QAAQ,SAACkF,EAAKhF,GACX,OAAOgF,EAAMhF,IACd,GAIU,I,+BAuGb,IAAMiF,EAAW,eAEVjH,KAAKjD,MAAMmK,MAElB,IAAK,IAAIC,KAAOF,EAEZA,EAAYE,GAAOF,EAAYE,IAAQ,EAG3C,IAAIC,EAAe,KAEfnG,EAASjB,KAAKjD,MAAM2I,MAAQ,2DAAsC,kBAAC,GAAD,MAqCtE,OAnCG1F,KAAKjD,MAAMmK,OACVjG,EACI,kBAAC3B,EAAD,KAEI,kBAAC,EAAD,CAAQiC,YAAavB,KAAKjD,MAAMmK,OAChC,kBAAC,GAAD,CAEI/D,gBAAiBnD,KAAKjD,MAAMsK,mBAC5BjE,kBAAmBpD,KAAKjD,MAAMuK,qBAC9B5E,SAAUuE,EACV3D,YAAetD,KAAKuH,oBAAoBvH,KAAKjD,MAAMmK,MACnD3D,QAASvD,KAAKwG,gBAEd5H,OAAQoB,KAAKjD,MAAMoB,gBAEnB6E,MAAOhD,KAAKjD,MAAMiG,SAI9BoE,EAAiB,kBAAE,GAAF,CAEb7F,YAAavB,KAAKjD,MAAMmK,KACxBlE,MAAOhD,KAAKjD,MAAMiG,MAClBoB,kBAAqBpE,KAAK4G,sBAC1BvC,kBAAqBrE,KAAK6G,2BAY9B,kBAACvH,EAAD,KACI,kBAAC,GAAD,CAAOR,KAAMkB,KAAKN,MAAM6G,WAAa5C,YAAc3D,KAAK4G,uBACrDQ,GAEFnG,O,GAnMWf,aAoObC,gBAtBS,SAAAT,GACpB,MAAO,CACHwH,KAAMxH,EAAM8H,cAAcjG,YAC1ByB,MAAOtD,EAAM8H,cAAcC,WAC3B/B,MAAOhG,EAAM8H,cAAc9B,MAE3BvH,gBAAsC,OAArBuB,EAAMU,KAAKC,UAGR,SAAA6E,GACxB,MAAO,CACHmC,mBAAoB,SAACK,GAAD,OAAaxC,ECtO9B,CACH1E,KJVsB,iBIWtBmH,eDoOiED,KACjEJ,qBAAsB,SAACI,GAAD,OAAaxC,EC9NhC,CACH1E,KJlByB,oBImBzBmH,eD4NsED,KACtEX,kBAAmB,kBAAM7B,GCrMtB,SAAAA,GACHX,GAAMqD,IAAI,wDACTC,MAAK,SAAA3B,GACFhB,EApBD,CACH1E,KJ1BuB,kBI2BvBe,YAkB4B2E,EAAS4B,UAEpCC,OAAM,SAAArC,GACHR,EAdD,CACH1E,KJhCgC,oCG6OhCsG,eAAgB,kBAAM5B,EE/LnB,CACH1E,KLtCqB,mBGsOrBiG,sBAAuB,SAACpB,GAAD,OAAUH,EAAS8C,GAA4B3C,QAM/DlF,CAA6CqF,GAAiBc,GAAe/B,K,oBGnO7E0D,GAjBS,SAAClL,GAErB,OACI,yBAAKG,UAAWC,KAAQ+K,iBACpB,wDACA,yBAAK7K,MAAO,CAAC8K,MAAM,OAAQC,OAAO,SAC9B,kBAAC,EAAD,CAAQ7G,YAAaxE,EAAMwE,eAE/B,kBAAC,GAAD,CAAQyC,QAAS,SAASzF,QAASxB,EAAMsL,mBAAzC,UALJ,IAMI,kBAAC,GAAD,CAAQrE,QAAS,UAAUzF,QAASxB,EAAMuL,mBAA1C,YANJ,M,wCC8DOC,GAnED,SAAExL,GACZ,IAAIyL,EAAe,KACfC,EAAkB,KAIhBC,EAAe,CAACvL,KAAQwL,cAa9B,QATK5L,EAAM6L,OAAS7L,EAAM8L,gBAAkB9L,EAAM+L,SAC9CJ,EAAa/B,KAAKxJ,KAAQ4L,UAGzBhM,EAAM6L,OAAS7L,EAAM+L,UACtBL,EAAkB,2DAId1L,EAAMiM,aAEV,IAAM,QACFR,EAAe,yCACXtL,UAAWwL,EAAalJ,KAAK,MAAUzC,EAAMkM,cADlC,CAEXC,MAAOnM,EAAMoM,aAAcC,SAAUrM,EAAMsM,WAC/C,MACJ,IAAM,WACFb,EAAe,4CACXtL,UAAWwL,GAAkB3L,EAAMkM,cADxB,CAEXC,MAAOnM,EAAMoM,aAAcC,SAAUrM,EAAMsM,WAC/C,MACJ,IAAM,SACFb,EACI,4BACItL,UAAWwL,EACXQ,MAAOnM,EAAMoM,aACbC,SAAUrM,EAAMsM,SACftM,EAAMkM,cAAcK,QAAQ9H,KAAI,SAAA+H,GAAM,OACnC,4BAAQ1H,IAAK0H,EAAOL,MAAOA,MAAOK,EAAOL,OACpCK,EAAOC,kBAMxB,MACJ,QACIhB,EAAe,yCACXtL,UAAWwL,GAAkB3L,EAAMkM,cADxB,CAEXC,MAAOnM,EAAMoM,aAAeC,SAAUrM,EAAMsM,WAGxD,OAEI,yBAAKnM,UAAWC,KAAQsM,OAEpB,2BAAOvM,UAAWC,KAAQmF,OAAQvF,EAAMwF,OACvCiG,EACAC,IC5CPiB,G,2MAEFhK,MAAM,CAEFiK,UAAW,CAENC,KAAM,CACFZ,YAAa,QACbC,cAAe,CACXzI,KAAM,OACNqJ,YAAa,aAEjBX,MAAO,GAEPY,WAAY,CACRC,UAAU,GAEdnB,OAAO,EACPE,SAAS,GAEbkB,OAAS,CACNhB,YAAa,QACbC,cAAe,CACXzI,KAAM,OACNqJ,YAAa,UAEjBX,MAAO,GACPY,WAAY,CACRC,UAAU,GAEdnB,OAAO,EACPE,SAAS,GAEZmB,QAAS,CACNjB,YAAa,QACbC,cAAe,CACXzI,KAAM,OACNqJ,YAAa,YAEjBX,MAAO,GACPY,WAAY,CACRC,UAAU,EACVG,UAAW,EACXC,UAAW,GAEfvB,OAAO,EACPE,SAAS,GAEZsB,QAAS,CACNpB,YAAa,QACbC,cAAe,CACXzI,KAAM,OACNqJ,YAAa,WAEjBX,MAAO,GACPY,WAAY,CACRC,UAAU,GAEdnB,OAAO,EACPE,SAAS,GAEZuB,MAAM,CACHrB,YAAa,QACbC,cAAe,CACXzI,KAAM,QACNqJ,YAAa,eAEjBX,MAAO,GACPY,WAAY,CACRC,UAAU,GAEdnB,OAAO,EACPE,SAAS,GAGZwB,eAAgB,CACbtB,YAAa,SACbC,cAAe,CACXK,QAAS,CACL,CAACJ,MAAO,UAAWM,aAAc,WACjC,CAACN,MAAO,WAAYM,aAAc,cAI1CN,MAAO,UACPY,WAAW,GACXlB,OAAO,IAMf2B,aAAa,G,EAKjBC,aAAe,SAACC,GAEZA,EAAMC,iBAMN,IAAMC,EAAW,GACjB,IAAK,IAAIC,KAAyB,EAAKlL,MAAMiK,UACzCgB,EAASC,GAAyB,EAAKlL,MAAMiK,UAAUiB,GAAuB1B,MAGlF,IAAM2B,EAAQ,CACVtJ,YAAa,EAAKxE,MAAMmK,KACxBlE,MAAO,EAAKjG,MAAMiG,MAClB8H,UAAWH,EACXhG,OAAQ,EAAK5H,MAAM4H,QAIvB,EAAK5H,MAAMgO,cAAcF,EAAO,EAAK9N,MAAMsD,Q,EAkC/C2K,oBAAsB,SAACP,EAAOQ,GAG5B,IAAMC,EAAe,eACd,EAAKxL,MAAMiK,WAGZwB,EAAiB,eAChBD,EAAgBD,IAGrBE,EAAkBjC,MAAQuB,EAAMW,OAAOlC,MACvCiC,EAAkBvC,MAAQ,EAAKyC,cAAcF,EAAkBjC,MAAOiC,EAAkBrB,YACxFqB,EAAkBrC,SAAU,EAC5BoC,EAAgBD,GAAmBE,EACnCjK,QAAQC,IAAIgK,GAGZ,IAAIZ,GAAc,EAClB,IAAK,IAAKU,KAAmBC,EACzBX,EAAcW,EAAgBD,GAAiBrC,OAAS2B,EAE5D,EAAK1K,SAAS,CAAC8J,UAAWuB,EAAiBX,YAAaA,K,6EApD7CrB,EAAOoC,GAElB,IAAIC,GAAU,EACd,OAAKD,IAKDA,EAAMvB,WACNwB,EAA2B,KAAjBrC,EAAMsC,QAAiBD,GAKjCD,EAAMpB,YACNqB,EAAUrC,EAAMhH,QAAUoJ,EAAMpB,WAI/BoB,EAAMnB,YACPoB,EAAUrC,EAAMhH,QAAUoJ,EAAMnB,WAI7BoB,K,+BAgCD,IAAD,OAECE,EAAmB,GACzB,IAAK,IAAI5J,KAAO7B,KAAKN,MAAMiK,UAEvB8B,EAAkB9E,KAAK,CACnB+E,GAAI7J,EACJ8J,OAAQ3L,KAAKN,MAAMiK,UAAU9H,KAKrC,IAAI+J,EACA,0BAAMC,SAAU7L,KAAKwK,cAChBiB,EAAkBjK,KAAI,SAAAsK,GAAW,OAC9B,kBAAC,GAAD,CAEIjK,IAAKiK,EAAYJ,GACjB1C,YAAa8C,EAAYH,OAAO3C,YAChCC,cAAe6C,EAAYH,OAAO1C,cAClCE,aAAc2C,EAAYH,OAAOzC,MACjCN,MAAOkD,EAAYH,OAAO/C,MAC1BC,eAAiBiD,EAAYH,OAAO7B,WACpChB,QAAWgD,EAAYH,OAAO7C,QAC9BO,QAAS,SAACoB,GAAD,OAAW,EAAKO,oBAAoBP,EAAOqB,EAAYJ,UAGxE,kBAAC,GAAD,CAAQ1H,QAAQ,UAAUtB,UAAW1C,KAAKN,MAAM6K,aAAhD,UAMR,OAHIvK,KAAKjD,MAAMgP,UACXH,EAAO,kBAAC,GAAD,OAGP,yBAAK1O,UAAWC,KAAQuM,aACpB,uDACCkC,O,GAtNS1L,aAgPXC,gBAnBS,SAAAT,GACpB,MAAO,CACHwH,KAAMxH,EAAM8H,cAAcjG,YAC1ByB,MAAOtD,EAAM8H,cAAcC,WAC3BsE,QAASrM,EAAMmL,MAAMkB,QACrB1L,MAAOX,EAAMU,KAAKC,MAClBsE,OAAQjF,EAAMU,KAAKuE,WAKA,SAAAO,GACvB,MAAO,CAEH6F,cAAe,SAACD,EAAWzK,GAAZ,OAAsB6E,EH/Nf,SAAC4F,EAAWzK,GACtC,OAAO,SAAA6E,GACHA,EATG,CACH1E,KLb6B,2BKsB7B+D,GAAMyH,KAAK,qBAAuB3L,EAAOyK,GACxCjD,MAAK,SAAA3B,GACFhF,QAAQC,IAAI+E,EAAS4B,MACrB5C,EA9ByB,SAACwG,EAAIZ,GACtC,MAAO,CACHtK,KLC+B,0BKA/ByL,QAASP,EACTZ,UAAWA,GA0BEoB,CAAsBhG,EAAS4B,KAAK8B,KAAMkB,OAItD/C,OAAM,SAAArC,GACHR,EA3BsB,SAACQ,GAC/B,MAAO,CACHlF,KLN4B,uBKO5BkF,MAAOA,GAwBMyG,CAAmBzG,QGoNcsC,CAAuB8C,EAAWzK,QAKzEF,CAA6CqF,GAAiBkE,GAAanF,KCzPpF6H,G,2MAiCFC,yBAA2B,WAEvB,EAAKtP,MAAM2J,QAAQ4F,U,EAKvBC,yBAA2B,WAEvB,EAAKxP,MAAM2J,QAAQ8F,QAAQ,2B,wEAK3B,IAAIC,EAAW,kBAAC,IAAD,CAAU7O,GAAG,MAC5B,GAAIoC,KAAKjD,MAAMmK,KAAM,CAEjB,IAAMwF,EAAoB1M,KAAKjD,MAAM4P,UAAa,kBAAC,IAAD,CAAU/O,GAAG,MAAS,KACxE6O,EACC,6BACKC,EACE,kBAAC,GAAD,CAEInL,YAAavB,KAAKjD,MAAMmK,KACxBmB,kBAAmBrI,KAAKqM,yBACxB/D,kBAAmBtI,KAAKuM,2BAG5B,kBAAC,IAAD,CACIlH,KAAMrF,KAAKjD,MAAM6P,MAAMvH,KAAO,gBAE9BwH,UAAYnD,KAZvB,KAmBL,OAAO+C,M,GAvEQvM,aAwFRC,gBAZS,SAAAT,GACpB,MAAO,CACHwH,KAAMxH,EAAM8H,cAAcjG,YAC1BoL,UAAWjN,EAAMmL,MAAM8B,aAShBxM,CAAyBiM,I,6BChFlCU,G,2MAEFpN,MAAQ,CACJmD,SAAU,CACNwH,MAAO,CACHrB,YAAa,QACbC,cAAe,CACXzI,KAAM,QACNqJ,YAAa,gBAEjBX,MAAO,GAEPY,WAAY,CACRC,UAAU,EACVgD,SAAS,GAEbnE,OAAO,EACPE,SAAS,GAEbkE,SAAU,CACNhE,YAAa,QACbC,cAAe,CACXzI,KAAM,WACNqJ,YAAa,iBAEjBX,MAAO,GAEPY,WAAY,CACRC,UAAU,EACVG,UAAW,GAEftB,OAAO,EACPE,SAAS,IAIjBmE,UAAU,G,EAuCdjC,oBAAsB,SAACP,EAAOyC,GAC1B,IAAMC,EAAe,eACd,EAAKzN,MAAMmD,SADG,gBAEhBqK,EAFgB,eAGV,EAAKxN,MAAMmD,SAASqK,GAHV,CAIbhE,MAAOuB,EAAMW,OAAOlC,MACpBN,MAAO,EAAKyC,cAAcZ,EAAMW,OAAOlC,MAAO,EAAKxJ,MAAMmD,SAASqK,GAAapD,YAC/EhB,SAAS,MAGjB,EAAKjJ,SAAS,CAACgD,SAAUsK,K,EAG7BC,cAAgB,SAAC3C,GAEbA,EAAMC,iBACN,EAAK3N,MAAMsQ,OAAO,EAAK3N,MAAMmD,SAASwH,MAAMnB,MAAO,EAAKxJ,MAAMmD,SAASmK,SAAS9D,MAAO,EAAKxJ,MAAMuN,W,EAKtGK,sBAAwB,WACpB,EAAKzN,UAAS,SAAAE,GACV,MAAO,CAACkN,UAAWlN,EAAUkN,c,mFAzD5BjN,KAAKjD,MAAMwQ,gBAAkD,MAAhCvN,KAAKjD,MAAMyQ,kBACzCxN,KAAKjD,MAAM0J,0B,oCAKHyC,EAAOoC,GAEnB,IAAIC,GAAU,EACd,OAAKD,IAKDA,EAAMvB,WACNwB,EAA2B,KAAjBrC,EAAMsC,QAAiBD,GAKjCD,EAAMpB,YACNqB,EAAUrC,EAAMhH,QAAUoJ,EAAMpB,WAI/BoB,EAAMnB,YACPoB,EAAUrC,EAAMhH,QAAUoJ,EAAMnB,WAI7BoB,K,+BAiCA,IAAD,OAECE,EAAmB,GACzB,IAAK,IAAI5J,KAAO7B,KAAKN,MAAMmD,SAEvB4I,EAAkB9E,KAAK,CACnB+E,GAAI7J,EACJ8J,OAAQ3L,KAAKN,MAAMmD,SAAShB,KAIpC,IAAI+J,EAAOH,EAAkBjK,KAAK,SAAAsK,GAAW,OACzC,kBAAC,GAAD,CACGjK,IAAKiK,EAAYJ,GACjB1C,YAAa8C,EAAYH,OAAO3C,YAChCC,cAAe6C,EAAYH,OAAO1C,cAClCE,aAAc2C,EAAYH,OAAOzC,MACjCN,MAAOkD,EAAYH,OAAO/C,MAC1BC,eAAiBiD,EAAYH,OAAO7B,WACpChB,QAAWgD,EAAYH,OAAO7C,QAC9BO,QAAS,SAACoB,GAAD,OAAW,EAAKO,oBAAoBP,EAAOqB,EAAYJ,UAMnE1L,KAAKjD,MAAMgP,UACXH,EAAO,kBAAC,GAAD,OAIX,IAAI6B,EAAe,KACfzN,KAAKjD,MAAM2I,QACX+H,EAEI,2BAAIzN,KAAKjD,MAAM2I,MAAMW,UAK7B,IAAIqH,EAAe,KAKpB,OAJK1N,KAAKjD,MAAMoB,kBACZuP,EAAc,kBAAC,IAAD,CAAU9P,GAAIoC,KAAKjD,MAAMyQ,oBAIvC,yBAAKtQ,UAAWC,KAAQ2P,MACnBY,EACAD,EACD,0BAAM5B,SAAU7L,KAAKoN,eAChBxB,EACD,kBAAC,GAAD,CAAQ5H,QAAQ,WAAhB,cAEJ,kBAAC,GAAD,CACIzF,QAAUyB,KAAKsN,sBACftJ,QAAQ,UAFZ,cAEiChE,KAAKN,MAAMuN,SAAW,SAAW,SAFlE,U,GA7JG/M,aA2LJC,gBApBS,SAAAT,GACpB,MAAO,CACHqM,QAASrM,EAAMU,KAAK2L,QACpBrG,MAAOhG,EAAMU,KAAKsF,MAElBvH,gBAAsC,OAArBuB,EAAMU,KAAKC,MAC5BkN,eAAgB7N,EAAM8H,cAAcmG,SACpCH,iBAAkB9N,EAAMU,KAAKoN,qBAKV,SAAAtI,GACvB,MAAO,CACHmI,OAAQ,SAAChD,EAAO2C,EAAUC,GAAlB,OAA+B/H,EX3I3B,SAACmF,EAAO2C,EAAUC,GAClC,OAAO,SAAA/H,GACHA,EAxDG,CACH1E,KCkBkB,cDsClB,IAAMoN,EAAW,CACbvD,MAAOA,EACP2C,SAAUA,EACVa,mBAAmB,GAGnBC,EAAM,wGACLb,IACDa,EAAM,qHAEVvJ,GAAMyH,KAAK8B,EAAKF,GACf/F,MAAK,SAAA3B,GACFhF,QAAQC,IAAI+E,GAGb,IAAM6H,EAAiB,IAAIC,MAAK,IAAIA,MAAOC,UAAsC,IAA1B/H,EAAS4B,KAAKoG,WAEpEpJ,aAAaqJ,QAAQ,QAASjI,EAAS4B,KAAKlD,SAE5CE,aAAaqJ,QAAQ,iBAAkBJ,GAEvCjJ,aAAaqJ,QAAQ,SAAUjI,EAAS4B,KAAKsG,SAG7ClJ,EAASR,GAAWwB,EAAS4B,KAAKlD,QAASsB,EAAS4B,KAAKsG,UACzDlJ,EAASF,GAAiBkB,EAAS4B,KAAKoG,eAE3CnG,OAAM,SAAArC,GAEHR,EAvEY,SAACQ,GACrB,MAAO,CACHlF,KCIiB,YDHjBkF,MAAOA,GAoEM2I,CAAS3I,EAAMQ,SAAS4B,KAAKpC,YW2GMsC,CAAaqC,EAAO2C,EAAUC,KAC9ExG,sBAAuB,kBAAMvB,EAAS8C,GAA4B,UAK3D7H,CAA4C2M,ICnMrDwB,G,4LAGEtO,KAAKjD,MAAMwR,a,+BAIX,OAAO,kBAAC,IAAD,CAAU3Q,GAAG,U,GAPPsC,aAiBNC,eAAQ,MANI,SAAA+E,GACvB,MAAO,CACHqJ,SAAU,kBAAMrJ,EAAS8C,UAIlB7H,CAAkCmO,I,oBC0BlCzD,GA/CD,SAAC9N,GAGX,IAAMwE,EAAc,GAEpB,IAAK,IAAIoG,KAAkB5K,EAAMwE,YAE7BA,EAAYoF,KACR,CACIiD,KAAMjC,EACN6G,OAAQzR,EAAMwE,YAAYoG,KAMtC,IAAM8G,EAAmBlN,EAAYC,KAAI,SAAAkN,GACzC,OAAO,0BACHrR,MAAO,CACC8G,cAAe,aACfwK,QAAS,eACTvG,OAAQ,SACRwG,OAAQ,iBACRC,QAAS,OACjBhN,IAAK6M,EAAG9E,MAAQ8E,EAAG9E,KAPhB,KAOwB8E,EAAGF,OAP3B,QAUP,OAEI,yBAAKtR,UAAWC,KAAQ2R,OACxB,2CAAiBL,GACb,qCAAU,uCAAaM,OAAOC,WAAWjS,EAAMiG,OAAOC,QAAQ,KAFlE,MCpBFgM,G,4LAKEjP,KAAKjD,MAAMmS,YAAYlP,KAAKjD,MAAMsD,MAAOL,KAAKjD,MAAM4H,U,+BAMpD,IAAIW,EAAWtF,KAAKjD,MAAMgP,QAAiB,kBAAC,GAAD,MAAP,KACpC,OAEI,6BACKzG,EAEAtF,KAAKjD,MAAMoS,OAAO3N,KAAI,SAAAqJ,GAAK,OACxB,kBAAC,GAAD,CACIhJ,IAAKgJ,EAAMa,GACXnK,YAAasJ,EAAMtJ,YACnByB,MAAO6H,EAAM7H,gB,GArBhB9C,aAmDNC,gBApBS,SAAAT,GACpB,MAAO,CACHyP,OAAQzP,EAAMmL,MAAMsE,OACpBpD,QAASrM,EAAMmL,MAAMkB,QACrB1L,MAAOX,EAAMU,KAAKC,MAElBsE,OAAQjF,EAAMU,KAAKuE,WAKA,SAAAO,GACvB,MAAM,CACFgK,YAAa,SAAC7O,EAAOsE,GAAR,OAAmBO,ERiBf,SAAC7E,EAAOsE,GAC7B,OAAO,SAAAO,GAEH,IAAMkK,EAAc,SAAW/O,EAAQ,8BAAgCsE,EAAS,IAChFJ,GAAMqD,IAAI,eAAiBwH,GACtBvH,MAAK,SAAA1B,GACF,IAAMkJ,EAAe,GAErB,IAAK,IAAIxN,KAAOsE,EAAI2B,KAEhBuH,EAAa1I,KAAb,eACOR,EAAI2B,KAAKjG,GADhB,CAEI6J,GAAI7J,KAKZqD,EAvBL,CACH1E,KLnDyB,oBKoDzB2O,OAqBkCE,OAG7BtH,OAAM,SAAArC,GAEHR,EArCc,SAACQ,GAC3B,MAAO,CACHlF,KL1CuB,kBK2CvBkF,MAAOA,GAkCU4J,CAAe5J,QQvCSsC,CAAkB3H,EAAOsE,QAO3DxE,CAA6CoP,GAAiBN,GAAQ1K,KCjD/EiL,G,4LAGFxP,KAAKjD,MAAM0S,gB,+BAMX,IAAIC,EACF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQrK,KAAK,QAAQwH,UAAWC,KAChC,kBAAC,IAAD,CAAOzH,KAAK,IAAIvH,OAAK,EAAC+O,UAAWvG,KACjC,kBAAC,IAAD,CAAU1I,GAAG,OAoBjB,OAhBIoC,KAAKjD,MAAMoB,kBACbuR,EACE,kBAAC,IAAD,KAEI,kBAAC,IAAD,CAAOrK,KAAK,UAAUwH,UAAWyB,KACjC,kBAAC,IAAD,CAAOjJ,KAAK,QAAQwH,UAAWC,KAC/B,kBAAC,IAAD,CAAOzH,KAAK,YAAYwH,UAAWT,KACnC,kBAAC,IAAD,CAAO/G,KAAK,UAAUwH,UAAWoC,KALrC,IAMI,kBAAC,IAAD,CAAO5J,KAAK,IAAIvH,OAAK,EAAC+O,UAAWvG,KACjC,kBAAC,IAAD,CAAU1I,GAAG,QAQnB,6BACE,kBAAC,EAAD,KACK8R,Q,GApCKxP,aA2DHyP,eAAWxP,aAfF,SAAAT,GACtB,MAAO,CACLvB,gBAAsC,OAArBuB,EAAMU,KAAKC,UAKL,SAAA6E,GACzB,MAAO,CACLuK,YAAa,kBAAMvK,Gf+BZ,SAAAA,GACH,IAAM7E,EAAQyE,aAAa8K,QAAQ,SAEnC,GAAKvP,EAEE,CACH,IAAM0N,EAAiB,IAAIC,KAAKlJ,aAAa8K,QAAQ,mBACrD,GAAI7B,GAAkB,IAAIC,KACtB9I,EAASL,UACN,CACH,IAAMF,EAASG,aAAa8K,QAAQ,UACpC1K,EAASR,GAAWrE,EAAOsE,IAE3BO,EAASF,IAAkB+I,EAAeE,WAAY,IAAID,MAAOC,WAAY,YATjF/I,EAASL,ae7BK1E,CAA6CqP,KC/DnDK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpD,MACvB,2D,sBChBAqD,GAAe,CACjB1O,YAAa,KACbkG,WAAY,EACZ/B,OAAO,EAEPiI,UAAU,GAGRuC,GAAoB,CACtBC,MAAO,GACPC,OAAQ,GACRC,KAAM,IACNC,MAAO,IAyDIC,GAtDE,WAAkC,IAAjC7Q,EAAgC,uDAAzBuQ,GAAcO,EAAW,uCAE9C,OAAQA,EAAOhQ,MACX,IhBpBsB,iBgBqBlB,OAAO,eACAd,EADP,CAEI6B,YAAY,eACL7B,EAAM6B,YADF,gBAENiP,EAAO7I,eAAiBjI,EAAM6B,YAAYiP,EAAO7I,gBAAkB,IAGxEF,WAAY/H,EAAM+H,WAAayI,GAAkBM,EAAO7I,gBACxDgG,UAAU,IAGlB,IhB/ByB,oBgBgCrB,OAAO,eACAjO,EADP,CAEI6B,YAAY,eACL7B,EAAM6B,YADF,gBAENiP,EAAO7I,eAAiBjI,EAAM6B,YAAYiP,EAAO7I,gBAAkB,IAGxEF,WAAY/H,EAAM+H,WAAayI,GAAkBM,EAAO7I,gBACxDgG,UAAU,IAIlB,IhB3CuB,kBgB4CnB,sBACOjO,EADP,CAEI6B,YAAa,CACT4O,MAAOK,EAAOjP,YAAY4O,MAC1BG,MAAOE,EAAOjP,YAAY+O,MAC1BF,OAAQI,EAAOjP,YAAY6O,OAC3BC,KAAMG,EAAOjP,YAAY8O,MAE7B5I,WAAY,EACZ/B,OAAO,EACPiI,UAAU,IAGlB,IhBtDgC,2BgBuD5B,sBACOjO,EADP,CAEIgG,OAAO,IAGf,QACI,OAAOhG,IChEbuQ,GAAe,CACjBd,OAAQ,GACRpD,SAAS,EACTY,WAAW,EACXjH,MAAO,MAyDI6K,GArDE,WAAmC,IAAlC7Q,EAAiC,uDAA1BuQ,GAAeO,EAAW,uCAE/C,OAAQA,EAAOhQ,MAEX,IjBAqB,gBiBCjB,OAAO,eACAd,EADP,CAEIiN,WAAW,IAInB,IjBV6B,yBiBWzB,OAAO,eACAjN,EADP,CAEIqM,SAAS,IAGjB,IjBlB+B,0BiBmB/B,IAAM0E,EAAQ,eACPD,EAAO1F,UADA,CAEVY,GAAI8E,EAAOvE,UAEd,OAAO,eACAvM,EADP,CAEIqM,SAAS,EACTY,WAAU,EACVwC,OAAQzP,EAAMyP,OAAOlN,OAAOwO,KAEjC,IjB5B4B,uBiB6BxB,OAAO,eACA/Q,EADP,CAEIqM,SAAS,IAIjB,IjB1ByB,oBiB2BrB,OAAO,eACArM,EADP,CAEIqM,SAAS,EACToD,OAAQqB,EAAOrB,SAEvB,IjB/BuB,kBiBgCnB,sBACOzP,EADP,CAEIgG,MAAO8K,EAAO9K,MACdqG,SAAS,IAEjB,QACI,OAAOrM,ICvDbuQ,GAAe,CACjB5P,MAAO,KACPsE,OAAQ,KACRe,MAAO,KACPqG,SAAS,EAET2B,aAAc,KAgDH6C,GA5CC,WAAmC,IAAlC7Q,EAAiC,uDAAzBuQ,GAAcO,EAAW,uCAE9C,OAAQA,EAAOhQ,MAEX,IlBOkB,YkBNd,OAAO,eACAd,EADP,CAEIgG,MAAO,KACPqG,SAAS,IAGjB,IlBCmB,ckBAf,OAAO,eACArM,EADP,CAEIW,MAAOmQ,EAAO5L,QACdD,OAAQ6L,EAAO7L,OACfe,MAAO,KACPqG,SAAS,IAGjB,IlBPiB,YkBQb,OAAO,eACArM,EADP,CAEIgG,MAAO8K,EAAO9K,MACdqG,SAAS,IAEjB,IlBZmB,ckBaf,OAAO,eACArM,EADP,CAEIW,MAAO,KACPsE,OAAQ,OAGhB,IlBhB8B,yBkBiB1B,OAAO,eACAjF,EADP,CAEI8N,iBAAkBgD,EAAOnL,OAGjC,QACI,OAAO3F,IC3BbgR,GAAmBZ,OAAOa,sCAAwCC,KAGlEC,GAAeC,aAAgB,CACjCtJ,cAAeuJ,GACflG,MAAOmG,GACP5Q,KAAM6Q,KAIJC,GAAQC,aAAYN,GAAaH,GACnCU,aAAgBC,QAGdC,GAEF,kBAAC,IAAD,CAAUJ,MAAOA,IACb,kBAAC,IAAD,KAEK,kBAAC,GAAD,QAObK,IAASC,OAAQF,GAAKG,SAASC,eAAe,SJ+ExC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhK,MAAK,SAAAiK,GACJA,EAAaC,gBAEdhK,OAAM,SAAArC,GACLxE,QAAQwE,MAAMA,EAAMW,c","file":"static/js/main.8ed43413.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BreadBottom\":\"BurgerIngredient__BreadBottom__HuxZP\",\"BreadTop\":\"BurgerIngredient__BreadTop__10-cT\",\"Seeds1\":\"BurgerIngredient__Seeds1__3xHtz\",\"Seeds2\":\"BurgerIngredient__Seeds2__1cUso\",\"Meat\":\"BurgerIngredient__Meat__13nAN\",\"Cheese\":\"BurgerIngredient__Cheese__1FxeY\",\"Salad\":\"BurgerIngredient__Salad__1iTJE\",\"Bacon\":\"BurgerIngredient__Bacon__3vrAI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SideDrawer\":\"SideDrawer__SideDrawer__21TuB\",\"Open\":\"SideDrawer__Open__1pVYR\",\"Close\":\"SideDrawer__Close__3Yv1l\",\"Logo\":\"SideDrawer__Logo__3TkPv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BuildControl\":\"BuildControl__BuildControl__1jYc3\",\"Label\":\"BuildControl__Label__33Z-p\",\"Less\":\"BuildControl__Less__377MJ\",\"More\":\"BuildControl__More__28-hQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__s67N0\",\"Label\":\"Input__Label___n-1m\",\"InputElement\":\"Input__InputElement__2-aFx\",\"Invalid\":\"Input__Invalid__1sl1p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toolbar\":\"Toolbar__Toolbar__2JJW-\",\"Logo\":\"Toolbar__Logo__1efBD\",\"DesktopOnly\":\"Toolbar__DesktopOnly__WADUd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItem\":\"NavigationItem__NavigationItem__23bcu\",\"active\":\"NavigationItem__active__2zJdO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BuildControls\":\"BuildControls__BuildControls__3_01f\",\"OrderButton\":\"BuildControls__OrderButton__myBwT\",\"enable\":\"BuildControls__enable__3jYIq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button__Button__QI7b2\",\"Success\":\"Button__Success__2dHUt\",\"Danger\":\"Button__Danger__2xnhN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Layout__Content__3pLYC\"};","module.exports = __webpack_public_path__ + \"static/media/burger.8d958e9f.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Logo__Logo__19WaN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItems\":\"NavigationItems__NavigationItems___yd_d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DrawerToggle\":\"DrawerToggle__DrawerToggle__26to0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop__Backdrop__efy1y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Burger\":\"Burger__Burger__3K4F-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal__Modal__32_-a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner__Loader__1DDwY\",\"load4\":\"Spinner__load4__2zf_T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary__CheckoutSummary__1xBm4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData__ContactData__1J81r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth__2YUr1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order__Order__4yi4Z\"};","const aux = (props) => props.children;\n\n\nexport default aux;","import React from 'react';\nimport burgerLogo from '../../assets/images/burger.png';\nimport classes from './Logo.css';\n\nconst logo = (props) => (\n\n    <div className={classes.Logo} style={{height: props.height}}>\n        <img src={burgerLogo} alt=\"MyBurger\"/>\n    </div>\n);\n\n\nexport default logo;"," import React from 'react';\nimport classes from './NavigationItem.css';\n\nimport { NavLink } from 'react-router-dom';\n\n\n const navigationItem = (props) => (\n     \n   <li className={classes.NavigationItem}>\n      <NavLink\n         to={props.link} /* viene del archivo NavigationItems.js */\n         exact={props.exact} /* viene del archivo NavigationItems.js */\n         activeClassName={classes.active}>{props.children} {/* si props.active es true que pasa a classes.active de lo contrario null */}\n      </NavLink>\n   </li>\n);\n\n export default navigationItem;","import React from 'react';\nimport classes from './NavigationItems.css';\nimport NavigationItem from './NavigationItem/NavigationItem';\n\nconst navigationItems = (props) => (\n    <ul className={classes.NavigationItems}> \n        <NavigationItem link=\"/\" exact>Burger Builder</NavigationItem>\n\n\n        {/* Si isAuthenticated es verdadero que se le muestre el boton de orders de lo contrario que no lo muestre  */}\n        { props.isAuthenticated\n        ? <NavigationItem link=\"/orders\">Orders</NavigationItem>\n        : null }\n\n\n        {/* Si esta authenticado o no  */}\n        { !props.isAuthenticated\n        ? <NavigationItem link=\"/auth\"> Authentication </NavigationItem>\n        : <NavigationItem link=\"/logout\"> Logout </NavigationItem> }\n       \n    </ul>\n\n);\n\nexport default navigationItems;","import React from 'react';\nimport classes from './DrawerToggle.css';\n\nconst drawerToggle = (props) => (\n    <div className={classes.DrawerToggle} onClick={props.clicked}>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div> /* props.clicked viene del archivo Toolbar.js */\n\n);\n\n\nexport default drawerToggle;","import React from 'react';\nimport classes from './Toolbar.css';\nimport Logo from '../../Logo/Logo';\nimport  NavigationItems from '../NavigationItems/NavigationItems';\nimport DrawerToggle from '../SideDrawer/DrawerToggle/DrawerToggle';\n\nconst toolbar = (props) => (\n    <header className={classes.Toolbar}> \n        <DrawerToggle clicked={props.drawerToggleClicked}/> {/* adding a sideDrawer toggle button , props.drawerToggleCliked viene del archivo Layout.js*/}\n        <div className={classes.Logo}>\n            <Logo />\n        </div>\n        <nav className={classes.DesktopOnly}>\n           <NavigationItems isAuthenticated={props.isAuth} /> {/* Viene del archivo layout.js */}\n        </nav>\n    </header> /* encabezado */\n\n);  /* jsx */\n\n\n\nexport default toolbar;","import React from 'react';\nimport classes from './Backdrop.css';\n\n/* Para el telon de findNodeModule. */\n\nconst backdrop = (props) => (\n\n    props.show ? <div className={classes.Backdrop} onClick={props.clicked}>  {/* archivo modals.js */}\n\n    </div> : null /* Verificr si es verdadero o falso */\n);\n\n\nexport default backdrop;","import React from 'react';\nimport Logo from '../../Logo/Logo';\nimport NavigationItems from '../NavigationItems/NavigationItems';\nimport classes from './SideDrawer.css';\nimport Backdrop from '../../UI/Backdrop/Backdrop';\nimport Aux from '../../../hoc/Aux/Aux';\n\nconst sideDrawer = (props) => {\n\n    let  attachedClasses = [classes.SideDrawer, classes.Close]; /* classes.Close y classes.SideDrawer viene del archivo SideDrawer.css */\n    if (props.open) {\n        attachedClasses = [classes.SideDrawer, classes.Open];\n\n    }\n    return(\n        < Aux >\n            <Backdrop \n                show={props.open} \n                clicked={props.closed}\n            /> {/* /* viene del archivo Backdrop.js y el show es de la condicion que si props.show es verdadero que se active una clase si no que retorne null es para el telon.*/}\n            \n            <div className={attachedClasses.join(' ')} onClick={props.closed}>  {/* /* closed viene del archivo Layout.js del metodo  sideDrawerClosedHandler. de igual forma props.open */}\n\n                <div className={classes.Logo}>\n\n                    <Logo />\n\n                </div>\n\n                <nav>\n                    <NavigationItems isAuthenticated={props.isAuth} /> {/* Viene del archivo layout.js */}\n                </nav>\n\n            </div>\n        </Aux>\n    );\n\n}; /* Componente funcional normal en el que obtenemos algo y devolvemos algo. */\n\n\nexport default sideDrawer;","import React, { Component } from 'react';\nimport Aux from '../Aux/Aux';\nimport classes from './Layout.css';\nimport Toolbar from '../../components/Navigation/Toolbar/Toolbar'\nimport SideDrawer from '../../components/Navigation/SideDrawer/SideDrawer';\n\n/* Redux */\nimport { connect } from 'react-redux';\n\n/* vamos a convertir Layout en class donde podemos implementar el metodo para que podamos escuc har ambas Partes\no cerrar haciendo click en el fondo (telon) , elegimos aqui porque tiene a los dos el Toolbar y SideDrawer*/\nclass Layout extends Component {\n\n    state={\n        showSideDrawer: false\n    }\n    /* METODO PARA CERRAR EL SIDEDRAWER */\n    sideDrawerClosedHandler = () => {\n        this.setState({showSideDrawer: false})\n\n    }\n   /*  adding a sideDrawer toggle button */\n\n    sideDrawerToggleHandler = () => {\n        this.setState((prevState) => {\n            return {showSideDrawer: !prevState.showSideDrawer}; /* showSideDrawer es verdadero entonces !this.state.showSideDrawer se establecera en falso. */\n\n        });\n    }\n \n\n    render () {\n        return(\n            <Aux>\n\n                <Toolbar \n                    isAuth={this.props.isAuthenticated}\n                    drawerToggleClicked={this.sideDrawerToggleHandler}/> \n                    \n                <SideDrawer\n                    isAuth={this.props.isAuthenticated} \n                    open={this.state.showSideDrawer} \n                    closed={this.sideDrawerClosedHandler}\n                />\n\n                <main className= {classes.Content}> \n                    {this.props.children}\n                </main>\n\n            </Aux>\n        )\n    }\n} \n\n/* Para la authenticacion */\n\nconst mapStateToProps = state => {\n    return {\n                                            /* si  no es igual a null , entonces isAuthenticated es verdadero de lo controraio es false. */\n        isAuthenticated: state.auth.token  != null\n    };\n};\n    \n\n\n\n\nexport default connect(mapStateToProps)(Layout);","import React, { Component }  from 'react';\nimport classes from './BurgerIngredient.css'\nimport PropTypes from 'prop-types';\n\nclass BurgerIngredient extends Component {\n    render () {\n\n        let ingredient = null;\n\n        /* Cambiar  */\n        switch (this.props.type) {\n\n            /* Aqui creamos el pan del fondo */\n            case ('bread-bottom'):\n                ingredient = <div className={classes.BreadBottom }></div>;\n                break;\n\n                /* Aqui creamos el pan top y luego las ensaladas. */\n            case ('bread-top'):\n                ingredient = (\n                    <div className={classes.BreadTop}>\n                        <div className={classes.Seeds1}></div>\n                        <div className={classes.Seeds2}></div>\n                    </div>\n                );\n                break;\n\n            case ('meat'):\n                ingredient = <div className={classes.Meat}></div>;\n                break;\n\n            case ('cheese'):\n                ingredient = <div className={classes.Cheese}></div>;\n                break;\n\n            case ('bacon'):\n                ingredient = <div className={classes.Bacon}></div>;\n                break;\n\n            case ('salad'):\n                ingredient = <div className={classes.Salad}></div>;\n                break;\n\n                /* De lo contrario */\n            default:\n                ingredient = null;       \n        }\n\n      return ingredient;\n\n    }\n} \n\n\n/* Agregando Papel de utileria(Validacion) */\nBurgerIngredient.propTypes= {\n  /*   Es requerido osea si alguna vez intentamos usar el componente de ingrediente sin pasar un tipo, obtendremos un error */\n    type: PropTypes.string.isRequired\n}\n\n\n\nexport default BurgerIngredient;","import React from 'react';\nimport classes from './Burger.css';\nimport BurgerIngredient from \"./BurgerIngredient/BurgerIngredient\";\n\nconst burger = (props) => {\n    console.log(props);\n    /* Object tiene un metodo clave que extrae las claves de un objeto dado y las convierte en una matriz , por ejemplo en este \n    caso covertira el state de los ingredientes en un string, luego lo mapeamos porque ya es una matriz para poder recorrerla, igKey ES NUESTRO PUNTERO*/\n     /* Object.keys(props.ingredients) es para pasar los ingredientes de forma de un arreglo */\n    let transformedIngredients = Object.keys(props.ingredients)\n    .map(igKey => {\n        /* esparcir o crear una nueva  matriz con tres espacios libres (3) en este caso es el espacio que nos dara props.ingredients luego otra vez mapiamos los elementos del nuevo arrego\n        usaremos (_) para indicar que el indice de ese elemento es importante para mi.*/\n        return[...Array(props.ingredients[igKey])].map((_, i) =>{\n           return <BurgerIngredient key={igKey + i} type= {igKey} />;\n           /* Esto crea una llave unica para cada ingrediente. igKey + 1 el igKey hace referencia al valor ejemplo salad\n           y la i hace referencia al subindice del arreglo en este caso o */\n\n        }); \n    })\n   /*  solo arreglo que contega los valores del anterior ... reducir la logica de transformedIngredients... arr es el valor anterior y el es el valor actual\n   arr tendra los valores actualizados  */\n    .reduce((arr, el) => {\n        return arr.concat(el)\n    }, []);/*  arreglo vacio */\n\n    \n    /* Agregando un if para vaidar que si esta en cero ingredientes que muestre un msj diciendo Please star adding ingredients. */\n\n    if (transformedIngredients.length === 0){\n\n        transformedIngredients = <p>Please Start Adding Ingredients :)</p>;\n    }\n   \n    return(\n       /*  Agregando los ingredientes del archivo BurgerIngredient pero no dinamicamente. */\n        <div className={classes.Burger}>\n            <BurgerIngredient type= \"bread-top\"/>\n            {transformedIngredients}\n            <BurgerIngredient type= \"bread-bottom\"/>\n\n        </div>\n    );\n};\n\n\nexport default burger;","import React from 'react';\nimport classes from './BuildControl.css';\n\nconst buildControl = (props) => (\n    <div className = {classes.BuildControl}>\n        <div className = {classes.Label}>{props.label}</div>\n        <button \n            className = {classes.Less} \n            onClick={props.removed} \n            disabled={props.disabled}>Less</button> {/* Agregar */}\n        <button \n            className = {classes.More} \n            onClick={props.added}>More</button> {/* Eliminar */} {/* props.added viene del archivo BuildControls */}\n    </div>\n\n);\n \nexport default buildControl;","import React from 'react';\nimport classes from './BuildControls.css';\nimport BuildControl from './BuildControl/BuildControl';\n\n\n/* Creando una matriz */\n\nconst controls = [\n    { label: 'Salad', type: 'salad' },\n    { label: 'Bacon', type: 'bacon' },\n    { label: 'Cheese', type: 'cheese' },\n    { label: 'Meat', type: 'meat' },\n\n];\n\nconst buildControls = (props) => (\n    <div className = {classes.BuildControls}>\n        <p>Current Price: <strong>{props.price.toFixed(2)}</strong></p> {/* toFixed(2) es para decir que solo queremos dos decimales. */}\n        {controls.map(ctrl =>(  /* Mapeamos la matriz llamada controls y luego ctrl que es el puntero del .map como el .each , luego a la etiqueta le asignamos el puntero ctrl.label que \n        label es un identificador unico. */\n            <BuildControl \n                key ={ctrl.label} \n                label={ctrl.label} \n                added={ () => props.ingredientAdded(ctrl.type)} /* viene del archivo BurgerBuilder.js */\n                removed= { () => props.ingredientRemoved(ctrl.type)}   /* viene del archivo BurgerBuilder.js */\n                disabled={props.disabled[ctrl.type]} />/* viene del archivo BurgerBuilder.js */\n        ))}\n\n        <button \n        className = {classes.OrderButton}\n        disabled= {!props.purchasable}\n        /* si el usuario esta authenticate puede order now de lo contrario se le mostrara Sign up para poder ordenar-- isAuth viene del archivo BurgerBuilder.js */\n        onClick={props.ordered}>{props.isAuth ? 'ORDER NOW' : 'SIGN UP TO ORDER'}</button>\n\n\n\n        \n            \n\n        \n    </div>\n\n);\n\n\nexport default buildControls;","import React, { Component } from 'react';\nimport classes from './Modal.css';\nimport Aux from '../../../hoc/Aux/Aux';\nimport Backdrop from '../Backdrop/Backdrop';\n\nclass Modal extends Component {\n\n    /* Creamos un componente de que solo se actualice si se muestran cambios. */\n    shouldComponentUpdate(nextProps, nextState){        //spinner \n            return nextProps.show !== this.props.show || nextProps.children !== this.props.children;\n        } /* esto quiere decir que si nextProps.show si eso es igual a this.props.show entonces para el estado anterior quiero devolver true */\n    \n    /* Ahora creamos otro componente para confirmar si funciona */ /* Esto es para que se actualice solo cuando le demos al boton OrderNow  */\n    UNSAFE_componentWillUpdate () {\n        console.log('[Modal] WillUpdate');\n    }\n\n    render (){\n        return(\n            <Aux>\n                <Backdrop show={this.props.show} clicked={this.props.modalClosed}/> {/* para agregar el telon de fondo */} {/* clicked viene del archivo modal.js y modalClosed del archivo BurgerBuilder.js*/}\n                <div className={classes.Modal}\n                    style={{\n                        \n                        transform: this.props.show ?  'translateY(0)' : 'translateY(-100vh)',/* transformacion si Show es verdadero, si es tru translateY\n                        (0) y si no el otro.  */\n                        opacity: this.props.show ? '1' : '0'\n                    }}>\n\n                    {this.props.children}\n\n                </div>\n            </Aux>\n        );\n    }\n}\nexport default Modal;","import React from 'react';\nimport classes from './Button.css';\n\nconst button = (props) => {\n    console.log(props)\n    return (\n            <button\n            disabled={props.disabled} /* viene del archivo contactData.js */\n            className={[classes.Button, classes[props.btnType]].join('')} /* string */\n            onClick={props.clicked} /* viene del aechivo orderSummary */\n        >{props.children}</button>\n        \n\n    )\n    \n}; /* donde devuelvo jsx ()*/\n\n\nexport default button;","import React, { Component } from 'react';\nimport Aux from '../../../hoc/Aux/Aux';\nimport Button from '../../UI/Button/Button'\n\nclass OrderSummary extends Component {\n    /* Metodo para ver cuando esto realmente se actualiza */\n    UNSAFE_componentWillUpdate(){\n        /* se va actualizar cada que le damos click a cualquier boton que tenga la aplicacion. */\n        console.log('[OrderSummary] WillUpdate');\n    }\n\n\n\n    render (){\n\n        const ingredientSummary = Object.keys(this.props.ingredients)\n        .map(igKey => {\n            return (\n                <li key={igKey}> \n                    <span style={{textTransform: 'capitalize'}}>{igKey}</span>: {this.props.ingredients[igKey]}\n                </li>);\n        }   );\n\n        return(\n\n            <Aux>\n                <h3>Your Order</h3>\n                <p>A delicious burger with the fallowing ingredients:</p>\n                <ul> \n                    {ingredientSummary}\n                </ul>\n                <p><strong>Total Price: {this.props.price.toFixed(2)} </strong></p>\n                <p>Continue to Checkout?</p>\n                <Button btnType=\"Danger\" clicked={this.props.purchaseCancelled}> CANCEL</Button> {/* btnType viene del archivo Button.js  y Clicked del archivo BurgerBuilder.js*/} \n                <Button btnType=\"Success\" clicked={this.props.purchaseContinued}>CONTINUE</Button>\n           </Aux>\n\n        );\n    }\n}\n\nexport default OrderSummary;         ","import axios from 'axios';\n\nconst instance = axios.create({\n    \n    baseURL: 'https://burger-1e5b1.firebaseio.com/'\n});\n\n\nexport default instance;","import * as actionTypes from \"./actionTypes\";\n\nimport axios from '../../axios-orders';\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n\n    };\n};\n\nexport const authSucess = (token, userId) => {\n    return {\n        type: actionTypes.AUTH_SUCESS,\n        idToken: token,\n        userId: userId\n    };\n\n};\n\nexport const authFail = (error) => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    };\n};\n\nexport const logout = () => {\n    /* Para borrar el localStorage */\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationDate');\n    localStorage.removeItem('userId');\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    };\n};\n\n/* Validar  el tiempo del token */\nexport const checkAuthTimeout = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout());\n\n        }, expirationTime * 1000);\n\n    };\n\n};\n\n\n/* redirecting the user to the checkout page */\nexport const setAuthRedirectPath = (path) => {\n    return {\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\n        path: path\n    }\n}\n\n\nexport const auth = (email, password, isSignup) => {\n    return dispatch => {\n        dispatch(authStart());\n        const authData = {\n            email: email,\n            password: password,\n            returnSecureToken: true\n        };\n        /* Para el isSignup que significa signin o singup */\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBJGbf9wGCpGCwcG9bGkqHhaqOocoTQTds';\n        if( !isSignup ){\n            url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBJGbf9wGCpGCwcG9bGkqHhaqOocoTQTds';\n        }\n        axios.post(url, authData)\n        .then(response => {\n            console.log(response);\n\n                                          // new Date().getTime() trae la fecha en timeStamp     \n           const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000)\n            /* Trabajand con localstore para guardar el token , setItem es para almacenar un elemento local , en este caso el token*/\n            localStorage.setItem('token', response.data.idToken);\n            /* Cuando caduca e token */\n            localStorage.setItem('expirationDate', expirationDate);\n            /* el ide del usuario */\n            localStorage.setItem('userId', response.data.localId);\n\n\n            dispatch(authSucess(response.data.idToken, response.data.localId));\n            dispatch(checkAuthTimeout(response.data.expiresIn));\n        })\n        .catch(error => {\n           \n            dispatch(authFail(error.response.data.error));\n        });\n\n    };\n};\n\n/* creador de acciones de utilidad para el localStorage, Para iniciar sesion automaticamnete con exito en el usuario si tenemos un token valido */\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        /* SI token es null */\n        if (!token) {\n            dispatch(logout());\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if (expirationDate <= new Date) {\n                dispatch(logout())\n            } else {\n                const userId = localStorage.getItem('userId');\n                dispatch(authSucess(token, userId));\n                                        //   pasamos la feha de de vencimiento menos la nueva fecha y obtener la hora.\n                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime())/ 1000));  \n\n            }   \n        } \n    };\n};","export const ADD_INGREDIENT = \"ADD_INGREDIENT\";\nexport const REMOVE_INGREDIENT = \"REMOVE_INGREDIENT\";\nexport const SET_INGREDIENTS = \"SET_INGREDIENTS\";\n\n/* Error */\nexport const FETCH_INGREDIENTS_FAILED = \"FETCH_INGREDIENTS_FAILED\";\n\n\n/* ContactData */\nexport const PURCHASE_BURGER_SUCCESS = \"PURCHASE_BURGER_SUCCESS\";\nexport const PURCHASE_BURGER_FAIL = \"PURCHASE_BURGER_FAIL\";\nexport const PURCHASE_BURGER_START = \"PURCHASE_BURGER_START \";\n\n/* Se enciara cada vez que carguemos la pagina de pago */\nexport const PURCHASE_INIT = \"PURCHASE_INIT\";\n\n\n/* Ordenes */\n\nexport const ORDERS_GET_SUCESS = 'ORDERS_GET_SUCESS';\nexport const ORDERS_GET_FAIL = 'ORDERS_GET_FAIL';\n\n/* Authenticate */\n\nexport const AUTH_START = 'AUTH_STAR';\nexport const AUTH_SUCESS = 'AUTH_SUCESS';\nexport const AUTH_FAIL = \"AUTH_FAIL\";\nexport const AUTH_LOGOUT = \"AUTH_LOGOUT\";\n\n/* redirecting the user to the checkout page */\nexport const SET_AUTH_REDIRECT_PATH = 'SET_AUTH_REDIRECT_PATH';","import React from 'react';\nimport classes from './Spinner.css';\n\nconst spinner = () => (\n    <div className={classes.Loader} >Loading...</div>\n);\n\n\n\nexport default spinner;","import React, { Component }from 'react';\nimport Modal from '../../components/UI/Modal/Modal';\nimport Aux from '../Aux/Aux';\n\nconst withErrorHandler = (WrappedComponent, axios) => {                 //que reciba como entrada WrappedComponent y como salida lo que tiene props.\n    return  class extends Component {\n\n        state = {\n\n            error: null\n        }\n\n        // gancho de ciclo de vida.\n        UNSAFE_componentWillMount () {\n            this.reqInteceptor = axios.interceptors.request.use(req => {\n                this.setState({error: null});\n                return req;\n\n            }); //Interceptor para una solicitud... borrar cualquier error.\n            this.resInteceptor = axios.interceptors.response.use(res => res, error => {\n                this.setState({error: error}); // el primer error es de state y el egundo es del puntero.\n\n            }); //Interceptor global para el error\n\n        }\n        //Eliminar interceptors.\n        componentWillUnmount () {\n            axios.interceptors.request.eject(this.reqInteceptor);\n            axios.interceptors.response.eject(this.resInteceptor);\n\n        }\n\n        // clicked.\n        errorConfirmedHandler = () => {\n\n            this.setState({error: null})\n        }\n\n        render () {\n            return (\n                < Aux >\n                    <Modal \n                        show={this.state.error}\n                        modalClosed={this.errorConfirmedHandler}>  \n                        {this.state.error ? this.state.error.message : null} {/* si this.state.error es nulo, entonces generare el message de lo contrario generare nulo. */}\n                    </Modal>\n                    < WrappedComponent {...this.props} />                {/* distribuir cualquier accesorios que WrapedComponent pueda recibir */}\n                  \n                </Aux>\n            );\n        }\n    }\n}\n\n\nexport default withErrorHandler;","import React, { Component } from 'react';\nimport Aux from '../../hoc/Aux/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\n\n/* Axios */\nimport axios from '../../axios-orders';\n\n/* Para conectar el reducer al burgerBuilder */\nimport { connect } from 'react-redux';\n\n/* PARA LOS EVENTOS QUE TIENE ACTION */\nimport * as actions from '../../store/actions/index';\n\n\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\n\n\n\nclass BurgerBuilder extends Component {\n\n    /* Este es una forma de hacer los ingredientes dinamicamente */\n\n   /*  constructor(props){\n        super(props);\n        this.state = {...}\n    } */\n\n    /* Objeto */\n    state = {\n        // purchasable: false ,/* se convierte en verdad cuando podemos comprar una hamburguesa osea que la ahmburguesa tenga al menos un ingrediente. */\n        purchasing: false ,/* para saber si se hizo click en el boton OrderNow */\n       /*  loading: false,//spinner\n        error: false //error. */\n    \n\n    }\n    //obtener los ingredeintes desde el back end\n    componentDidMount () {\n\n        this.props.onInitIngredients();\n         \n    }\n\n    /* Actualizar el estado del purchasable , boton OrderNow */\n    updatePurchaseState ( ingredients){\n       \n        const sum = Object.keys(ingredients) /* creamo una matriz del object */\n            .map(igKey => {\n                return ingredients[igKey]; /* igKey retorna la cantidad de ensalada , tocino o de cualquier ingrediente que este en la variale ingredients */\n\n        })\n        .reduce ((sum, el) => {\n            return sum + el;\n        }, 0);\n\n        // this.setState({purchasable: sum > 0});\n        // REDUX\n        return sum > 0;\n\n    }\n\n    /* Agregar Ingrediente */\n    // addIngredientHandler = (type) => {\n    //     const oldCount = this.state.ingredients[type]; /* Primero calculamos el contador viejo. */\n    //     const updatedCount= oldCount + 1; /*  despues /* actualizamos el contador viejo por updateCounted. */ \n    //     const updateIngredients = {\n    //         ...this.state.ingredients /* los puntos son para distribuir las propiedades del antiguo estado de ingredientes. */\n    //     };\n\n    //     updateIngredients[type] = updatedCount; /* ACtualizar los ingredientes */\n\n    //     const priceAddition = INGREDIENT_PRICES[type]; /* Precio de la matriz INGREDIENT_PRICES */\n\n    //     const oldPrice = this.state.totalPrice; /* ver el valor viejo que es el precio base 4 del state */\n\n    //     const newPrice = oldPrice + priceAddition; /* Calcular el precio nuevo  */\n\n    //     this.setState({totalPrice: newPrice, ingredients: updateIngredients}); /* Establecer un estado , osea establecer el precio total para el nuevo precio de igual manera con os ingredientes.*/\n    //     this.updatePurchasableState(updateIngredients); /* Para el botton ordernow */\n    // };\n\n   /*  Eiminar ingrediente */\n    // removeIngredientHandler = (type) => {\n\n    //     const oldCount = this.state.ingredients[type]; /* Primero calculamos el contador viejo. */\n    //     if (oldCount <= 0 ){\n    //         return; \n    //    }\n    //     const updatedCount= oldCount - 1; /*  despues /* actualizamos el contador viejo por updateCounted. */ \n\n    //     const updateIngredients = {\n    //         ...this.state.ingredients /* los puntos son para distribuir las propiedades del antiguo estado de ingredientes. */\n    //     };\n\n    //     updateIngredients[type] = updatedCount; /* ACtualizar los ingredientes */\n\n    //     const priceDeduction= INGREDIENT_PRICES[type]; /* Precio de la matriz INGREDIENT_PRICES */\n\n    //     const oldPrice = this.state.totalPrice; /* ver el valor viejo que es el precio base 4 del state */\n\n    //     const newPrice = oldPrice - priceDeduction; /* Calcular el precio nuevo  */\n\n    //     this.setState({totalPrice: newPrice, ingredients: updateIngredients}); /* establecer el estado de totalPrice y de ingredients */\n\n    //     this.updatePurchasableState(updateIngredients); /* Para el botton ordernow */\n\n    // };\n\n\n     /* se activara siempre que nosotros hagamos click en el boton Order Now. */\n    purchaseHandler = () => {\n        /* Autheticate , si esta logiado que se haga esto de lo contrario */\n        if (this.props.isAuthenticated){\n            this.setState({purchasing: true}); /* establecer el estado del purchasing a true */\n        } else {\n            /* redirecting the user to the checkout page , /checkout siempre se disparara cuando vayamos a la pagina de authenticacion */\n            this.props.onSetAuthRedirectPath('/checkout');\n            this.props.history.push('/auth');\n        }\n        \n\n    }\n\n    /* Para cerrar el telon de fondo */\n    purchaseCancelHandler= () => {\n        this.setState({purchasing: false}); /* establecer el estado del purchasing a false */\n\n    }\n\n    /* Para seguir continuando con la compra */\n    purchaseContinueHandler = () => {\n        //alert('You continue!')\n       /*  lo que hace history es cambiar el componente dependiendo de la ruta que establezca, cambiar la porcion de la paginaque su pagina tiene en esa Pila. */\n        /* Codificar los ingredientes a esta nueva hamburguesa. */\n    //    const queryParams = [];\n    //   /*  lt i es un puntero que apuntara a las llaves (ingredients) por ejemplo i apunta ala primera llave bacon luego pasa a queryParams.push \n    //    que el encodeURIComponent solo te pasa ls valores en un string y te dice que encodeURIComponent(i) hace referencia ala primer llave que es \n    //    bacon + '=' que seria bacon= + encodeURIComponent(this.state.ingredients[i]) hace referencia al valor que es 0 , entonces quedaria\n    //    \"bacon=0\" y asi sucesivamente. */\n\n    //    for (let i in this.state.ingredients){\n    //        queryParams.push(encodeURIComponent(i) + '=' + encodeURIComponent(this.state.ingredients[i])); /* encodeURIComponent hace que te renderiza un string para que lo lea la url */\n    //    }\n    //    /* vamos a pasar tambien el precio. */\n    //    queryParams.push('price=' + this.state.totalPrice);\n    //    /* Union es que los va a separar con un & por ejemplo \"bacon=0&cheese=1&met=2&salad=0\"*/\n    //     const queryString = queryParams.join('&');\n        // this.props.history.push({\n        //     pathname: '/checkout',\n        //     search:'?' + queryString\n        // });\n        this.props.onInitPurchase();\n        this.props.history.push('/checkout');\n\n\n    }\n\n\n    render(){\n\n        const disableInfo = {\n           /*  cambiamos el .state.ingredients por la nueva configuracion de redux */\n            ...this.props.ings\n        };\n        for (let Key in disableInfo){ /* Cmprobaremos si es cero o menos y se actualizara para seahabilitar el boton. */\n\n            disableInfo[Key] = disableInfo[Key] <= 0  /* Key es el puntero que contiene la informacion de los ingredientes de la hamburguesa. */\n        }\n        //Para solucionar el error de la variable ingredients, que ahora esta como null en el state\n        let orderSummary = null;\n        //Para solucionar el error de la variable ingredients, que ahora esta como null en el state y que los ingredientes esten en firebase.\n        let burger = this.props.error ? <p>Ingredients can't be loaded!</p> : <Spinner />;\n        /*  cambiamos el .state.ingredients por la nueva configuracion de redux */\n        if(this.props.ings) { // si el state ingredients no son nulos que muestre el bloque del burger.\n            burger = (\n                <Aux>\n            \n                    <Burger ingredients={this.props.ings}/>\n                    <BuildControls\n                     /*  cambiamos el .this.addIngredientHandler por la nueva configuracion de redux del mapDispatchToProps */\n                        ingredientAdded={this.props.onIngredientsAdded} \n                        ingredientRemoved={this.props.onIngredientsRemoved}\n                        disabled={disableInfo}\n                        purchasable = {this.updatePurchaseState(this.props.ings)}\n                        ordered={this.purchaseHandler} /* viene del archivo js */\n                        /* Authenticated */\n                        isAuth={this.props.isAuthenticated}\n                         /*  cambiamos el .state.totalrce por .props.price que viene del metodo mapStateToProps*/\n                        price={this.props.price}/>\n                </Aux>    \n            );\n           //Para solucionar el error de la variable ingredients, que ahora esta como null en el state y que lo ingredientes esten en frebase\n            orderSummary =   < OrderSummary  \n             /*  cambiamos el .state.ingredients por la nueva configuracion de redux */\n                ingredients={this.props.ings} /* viene del archivo orderSummary.js */\n                price={this.props.price}  /*  cambiamos el .state.totalrce por .props.price que viene del metodo mapStateToProps*/\n                purchaseCancelled = {this.purchaseCancelHandler}\n                purchaseContinued = {this.purchaseContinueHandler}\n            />; \n        }\n\n       /*  //para el spinner\n        \n        if(this.state.loading) {\n            orderSummary = < Spinner />;\n\n        } */\n        \n        return(\n            <Aux>\n                <Modal show={this.state.purchasing}  modalClosed ={this.purchaseCancelHandler}>\n                  {orderSummary}   \n                </Modal>\n                {burger}\n               \n               \n                   \n            </Aux>\n        );\n    }\n\n};\n\n/* Creando los dos metodos de redux */\nconst mapStateToProps = state  => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        error: state.burgerBuilder.error,\n        /* Authentication */\n        isAuthenticated: state.auth.token !== null\n    };\n}\nconst mapDispatchToProps =  dispatch => {\n    return {\n        onIngredientsAdded: (ingName) => dispatch(actions.addIngredients(ingName)),\n        onIngredientsRemoved: (ingName) => dispatch(actions.removeIngredients(ingName)), /* ingredientName viene del archivo reducer.js */\n        onInitIngredients: () => dispatch(actions.initIngredients()),\n        onInitPurchase: () => dispatch(actions.purchaseInit()),\n        /* redirecting the user to the checkout page */\n        onSetAuthRedirectPath: (path) => dispatch(actions.setAuthRedirectPath(path))\n\n    };\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(BurgerBuilder, axios));   ","\nimport * as actionTypes from './actionTypes';\n/* Axios */\nimport axios from '../../axios-orders';\n\n\n/* Add Ingredients */\n\nexport const addIngredients = (ingsName) => {\n    return {\n        type: actionTypes.ADD_INGREDIENT,\n        ingredientName: ingsName\n    }\n};\n\n/* Remove ingredients */\n\nexport const removeIngredients= (ingsName) => {\n    return {\n        type: actionTypes.REMOVE_INGREDIENT,\n        ingredientName: ingsName\n    }\n};\n\n\n/* Utilizando thunk  */\nexport const setIngredients = (ingredients) => {\n    return {\n        type: actionTypes.SET_INGREDIENTS,\n        ingredients: ingredients\n\n    };\n};\n\n/* Error */\nexport const fetchIngredientsFailed = () => {\n    return {\n        type: actionTypes.FETCH_INGREDIENTS_FAILED\n    };\n};\n\n/* Utilizando thunk  para codigo asincrono*/\n\nexport const initIngredients = () => {\n    return dispatch =>  {\n        axios.get('https://burger-1e5b1.firebaseio.com/ingredients.json')\n        .then(response => {\n            dispatch(setIngredients(response.data));\n        })\n        .catch(error => {\n            dispatch(fetchIngredientsFailed());\n        }); \n\n    }\n}\n","import * as actionTypes from \"./actionTypes\";\n\nimport axios from '../../axios-orders';\n\n\n\nexport const purchaseBurgerSuccess = (id, orderData) => {\n    return {\n        type: actionTypes.PURCHASE_BURGER_SUCCESS,\n        orderId: id,\n        orderData: orderData\n    };\n};\n\nexport const purchaseBurgerFail = (error) => {\n    return {\n        type: actionTypes.PURCHASE_BURGER_FAIL,\n        error: error\n\n    };\n};\n\nexport const purchaseBurgerStart = () => {\n    return {\n        type: actionTypes.PURCHASE_BURGER_START\n    };\n};\n\n/* ContactData  */\n\nexport const purchaseBurger = (orderData, token) => {\n    return dispatch => {\n        dispatch(purchaseBurgerStart());\n        axios.post('/orders.json?auth=' + token, orderData)//para agregarles las ordenes a firebase, le pasamos como parametros la const order.\n        .then(response => {\n            console.log(response.data);\n            dispatch(purchaseBurgerSuccess(response.data.name, orderData))\n            /* this.props.history.push('/');/*  Para que luego que le click al boton order de la ruta /checkout/Contact-data se redireccione a home */ \n\n        })\n        .catch(error => {\n            dispatch(purchaseBurgerFail(error));\n          /*   this.setState({loading: false}); */\n\n        });\n    };\n\n};\n\n\nexport const purchaseInit = () => {\n    return {\n        type: actionTypes.PURCHASE_INIT\n    };\n};\n\n\n\n/* Orders */\n\nexport const ordersGetFails = (error) => {\n    return {\n        type: actionTypes.ORDERS_GET_FAIL,\n        error: error\n\n    };\n};\n\nexport const ordersGetSuccess = (orderData) => {\n    return {\n        type: actionTypes.ORDERS_GET_SUCESS,\n        orders: orderData\n    };\n};\n\nexport const getOrders = (token, userId) => {\n    return dispatch => {\n        /* Para mandar a traer solo las ordenes que le corresponde a cada UserId y le decimos que queremos ordenarlo por el userId */\n        const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"'; \n        axios.get('/orders.json' + queryParams)\n            .then(res => {\n                const fetcheOrders = [];\n                /* me va a traer todas las ordenes que estan en el backend en firebase, key hace refencia a los id de las ordenes */\n                for (let key in res.data){\n\n                    fetcheOrders.push({\n                        ...res.data[key],\n                        id: key\n                    });\n\n                }\n\n                dispatch(ordersGetSuccess(fetcheOrders));\n\n            })\n            .catch(error => {\n\n                dispatch(ordersGetFails(error));\n\n            });\n\n    }\n    }\n\n","import React from 'react';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\n\nimport classes from './CheckoutSummary.css';\n\nconst checkoutSummary = (props) => {\n\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!!</h1>\n            <div style={{width:'100%', margin:'auto'}}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <Button btnType= \"Danger\" clicked={props.checkoutCancelled}>CANCEL</Button> {/* arcivo checkout.js  */}\n            <Button btnType= \"Success\" clicked={props.checkoutContinued}>CONTINUE</Button> {/* arcivo checkout.js */}\n        </div>\n    );\n\n}\n\n\n\nexport default checkoutSummary;","import React from 'react';\n\nimport classes from './Input.css';\n\nconst input = ( props) => {\n    let inputElement = null;\n    let validationError = null;\n   \n     \n    /* agregando CSS. */\n    const inputClasses = [classes.InputElement];\n     /* agregando CSS.  props invalid viene del archivo contactData.js y props.shouldValidate igual lo que hacemos es verificar que uno de los object del state del contactaData no tiene reglas por que es un menu desplegable\n     props.touched es para validar si el usuario ha dado click en algun input si es true no se establezca la classe pero si es false que si se establezca.*/\n     \n    if (!props.valid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid); \n    }\n     /* Para imprimir un error al usuario */\n    if (!props.valid && props.touched) { /* los dos tienen que ser verdadero para que imprima el error*/\n        validationError = <p>Please enter a valid value!</p>;\n    }\n\n    /* LOS PROPS VIENEN DEL ARCHIVO ContactData.JS */\n    switch (props.elementType) {\n\n        case ('input'):\n            inputElement = <input \n                className={inputClasses.join(' ')} {...props.elementConfig} \n                value={props.defaultValue} onChange={props.changed}/>; /* elelemnetConfig viene del archivo ContactData.js */\n            break;\n        case ('textarea'):\n            inputElement = <textarea \n                className={inputClasses} {...props.elementConfig} \n                value={props.defaultValue} onChange={props.changed} />; /* props.changed viene del archivo ContactData.js */\n            break;\n        case ('select'):\n            inputElement = (\n                <select \n                    className={inputClasses} \n                    value={props.defaultValue}\n                    onChange={props.changed}> \n                    {props.elementConfig.options.map(option => ( /* esto viene del orden del state  del object deliveryMethod del archivo ContactData.js */\n                        <option key={option.value} value={option.value} >\n                            {option.displayValue}\n                        </option>\n                    ))}\n\n                </select>\n            );\n            break;\n        default: \n            inputElement = <input \n                className={inputClasses} {...props.elementConfig} \n                value={props.defaultValue}  onChange={props.changed}/>;\n    }\n\n    return(\n\n        <div className={classes.Input}>\n\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n            \n        </div>\n    );\n\n    \n};\n\n\nexport default input;","import React, { Component } from 'react';\n\nimport { connect } from \"react-redux\";\n\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.css';\n\nimport axios from '../../../axios-orders';\n\nimport Spinner from '../../../components/UI/Spinner/Spinner';\n\n/* Para hacer dinamicamente los input del ContactData. */\nimport Input from '../../../components/UI/Input/Input';\n\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\n\nimport * as actions from '../../../store/actions/index';\n\nclass ContactData extends Component {\n\n    state={\n\n        orderForm: {\n\n             name: {\n                 elementType: 'input',\n                 elementConfig: {\n                     type: 'text',\n                     placeholder: 'Your Name',\n                 },\n                 value: '',\n                 /* le decimos que este campo no debe de estar vacio. */\n                 validation: {\n                     required: true\n                 },\n                 valid: false,\n                 touched: false\n             },\n             street:  {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street',\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            } ,\n             zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 6\n                },\n                valid: false,\n                touched: false\n             },\n             country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country',\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n             },\n             email:{\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail',\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false /* es para verificar si el usuario toco un input */\n\n             },\n             deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n\n                    ]\n                },\n                value: 'fastest',\n                validation:{},\n                valid: true\n\n             }\n\n        },\n        /* Para el boton order del contactaData para que habilite cuando todos lo campos esten llenos. */\n        formIsValid: false\n      /*   loading: false */\n\n    }\n    /* Cuando haga click en el boton Order envie el pedido al servidor. */\n    orderHandler = (event) => {\n\n        event.preventDefault();\n\n         //Declaramos la const order para crear una estructura con la informacion que tendra en la base de datos para las ordenes.\n        /* this.setState( {loading: true} ); */\n\n        /* handling form submission para mandarlo despues a la base de datos firebase */\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm ) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value; /* .value le decimos que solo queremos ese valor dependiendo del puntero formElementIdentifier este apuntando si en este caso apunta a name solo seria name={value} */\n        }/* formElementIdentifier es name, street, email , ect de las llaves del orderForm del state. */\n\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price, /* viene del archivo Checkout */\n            orderData: formData,\n            userId: this.props.userId\n        }\n\n        /* Viene del metodo de abajo de redux mapDispatchToProps, esto contiene el axios.post de la ordenes */\n        this.props.onOrderBurger(order, this.props.token);\n    }\n\n    /* Para la cnfiguracion del validation que los campos no deben de ir vacio. */\n    checkValidity (value, rules) {\n        \n        let isValid = true;\n        if (!rules){\n            return true;\n\n        }\n\n        if (rules.required){ /* si esto es cierto entonces */\n            isValid = value.trim() !== '' && isValid; /* que si isValid es igual a la comparacion de los valores deberia ser igual si no es igual a una cadena vacia, si no es igual entonces isValid es true. trim remueve todos los espacios en blancos */\n\n        }\n\n        /* para validar la langitud de los input */\n        if (rules.minLength){\n            isValid = value.length >= rules.minLength\n        }\n\n         /* para validar la langitud de los input */\n         if (rules.maxLength){\n            isValid = value.length <= rules.maxLength\n        }\n\n\n        return isValid;\n\n    }\n\n\n    /* handling user input */\n    inputChangedHandler = (event, inputIdentifier) => {\n\n      /*  copiar el formulario de pedido del state para actualizar */\n      const updateOrderForm = {\n          ...this.state.orderForm\n      };\n      /*       copia de un solo object del formulario del state , inputIdentifier ahor va hacer como key , las llaves osea name, street etc y dependiendo cual sea solo se le hara copia a ese. */\n      const updateFormElement = { \n          ...updateOrderForm[inputIdentifier]\n        };\n         /* cambia el valor de la variable value que tiene cada object del state */\n        updateFormElement.value = event.target.value;\n        updateFormElement.valid = this.checkValidity(updateFormElement.value, updateFormElement.validation)\n        updateFormElement.touched = true;\n        updateOrderForm[inputIdentifier] = updateFormElement;\n        console.log(updateFormElement);\n\n        /* Para validar el boton que se active cuando todos los capos del formulario esten llenos. */\n        let formIsValid = true;\n        for (let  inputIdentifier in updateOrderForm){\n            formIsValid = updateOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({orderForm: updateOrderForm, formIsValid: formIsValid});\n\n    }\n\n    render (){\n        /* Para el nuevo state con muchos object */\n        const formElementsArray= [];\n        for (let key in this.state.orderForm){ /* Key es el identificador de las llaves de los object que estan en el this.state, name, street, zip code etc. */\n\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n        /* Para el spinner */\n        \n        let form = (\n            <form onSubmit={this.orderHandler}>                \n                {formElementsArray.map(formElement => (\n                    <Input \n                        \n                        key={formElement.id}\n                        elementType={formElement.config.elementType} \n                        elementConfig={formElement.config.elementConfig}\n                        defaultValue={formElement.config.value}\n                        valid={formElement.config.valid} /* para dar css en el archivo input que muestre de un color los input cuando esten false y cuando esten true de otro color */\n                        shouldValidate= {formElement.config.validation} /* Para saber que el ultimo object no tiene regla porque es un menu desplegable. */\n                        touched = {formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}\n                    />\n                ))}\n                <Button btnType='Success' disabled={!this.state.formIsValid}>Order</Button>\n            </form>\n        );\n        if (this.props.loading) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n               \n            </div>\n        );\n    }\n} \n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\n\nimport { Route, Redirect } from 'react-router-dom';\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\n\nclass Checkout extends Component {\n\n\n\n    // state ={\n    //     ingredients:null,\n    //     price: 0\n        \n        \n    // }\n\n//     UNSAFE_componentWillMount () {\n//         const query = new URLSearchParams(this.props.location.search); /* le decimos que busque la locacion de search que esta en el BurgerBuilder.js que incluye el signo de interrogacion, etc */\n//         /* Declaramos ingredients con un object vacio */\n//         const ingredients = {};\n//         let price = 0;\n//  /*        luego hacemo un for que os parametros que tiene search que ahora los tiene query entren y se vayan ordenando conforme \n//         ingredients[param[0]] = +params[1]; que seria ingredients{} params[0] seria salad y +param[1] seria 0 , {\"salad:0\"} y asi sucesivamente. */\n//         for (let param of query.entries()){\n//             //['salad', '1']\n//             //Precio\n//             if (param[0] === 'price'){\n//                 price = param[1]\n//             }else{\n//                 ingredients[param[0]] = +param[1];\n//             }\n           \n//         }\n\n//         this.setState({ingredients: ingredients, totalPrice: price});\n//     }\n\n    /* Para el boton cancell e la ruta /checkout*/\n    checkoutCancelledHandler = () => {\n\n        this.props.history.goBack();/*  esto simplemente regresa a la ultima pagina osea al home donde cremos la hamburguesa */\n\n    }\n\n    /* Para el boton continue de la ruta /checkout */\n    checkoutContinuedHandler = () => {\n\n        this.props.history.replace('/checkout/contact-data');/*  aqui decimos que reemplace la ruta actual con una nueva ruta  contact-data viene del archivo ContactData.js*/\n\n    }\n\n    render (){\n        let summary =  <Redirect to=\"/\" />\n        if (this.props.ings) {\n            /* Le decimos que si todavia purchased que es el proceso de la compra no se ha realizado que lo mantenga ahi mientras tanto si ya termino que lo redireccione a home */\n            const purchasedRedirect = this.props.purchased  ? <Redirect to=\"/\" /> : null\n            summary = (\n             <div>\n                 {purchasedRedirect}\n                    <CheckoutSummary \n                        /*  cambiamos el .state.ingredients por .props.ings que viene del metodo mapStateToProps*/\n                        ingredients={this.props.ings}\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler} /* vienen del archivo CheckoutSummary */\n                    />\n\n                    <Route \n                        path={this.props.match.path + '/contact-data'} \n                            // render={(props)=> ( <ContactData ingredients={this.state.ingredients} price={this.state.totalPrice} {...props} \n                        component= {ContactData}/> {/*  {...props} aquis e tomara todos los datos de contactData.js que tomara props.history*/}\n                    \n             </div>\n\n            );\n        }\n\n        return summary;\n    }\n    \n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n\n};\n\n\n\n\n\nexport default connect(mapStateToProps)(Checkout); ","import React, { Component } from 'react';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\n\nimport classes from './Auth.css';\n\n/* Redux */\nimport {connect} from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\n/* Soinner */\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\n/* Redirect */\nimport { Redirect } from 'react-router-dom';\n\nclass Auth extends Component {\n\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address',\n                },\n                value: '',\n                /* le decimos que este campo no debe de estar vacio. */\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Your Password',\n                },\n                value: '',\n                /* le decimos que este campo no debe de estar vacio. */\n                validation: {\n                    required: true,\n                    minLength: 7\n                },\n                valid: false,\n                touched: false\n            }\n            \n        },\n        isSignup: true \n    }\n\n    componentDidMount () {\n        /* Si no es true buildingBurger y  que si authRedirectPath no es igual a '/'  */\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n     /* Para la cnfiguracion del validation que los campos no deben de ir vacio. */\n     checkValidity (value, rules) {\n        \n        let isValid = true;\n        if (!rules){\n            return true;\n\n        }\n\n        if (rules.required){ /* si esto es cierto entonces */\n            isValid = value.trim() !== '' && isValid; /* que si isValid es igual a la comparacion de los valores deberia ser igual si no es igual a una cadena vacia, si no es igual entonces isValid es true. trim remueve todos los espacios en blancos */\n\n        }\n\n        /* para validar la langitud de los input */\n        if (rules.minLength){\n            isValid = value.length >= rules.minLength\n        }\n\n         /* para validar la langitud de los input */\n         if (rules.maxLength){\n            isValid = value.length <= rules.maxLength\n        }\n\n\n        return isValid;\n\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        };\n        this.setState({controls: updatedControls});\n    }\n\n    submitHandler = (event) => {\n\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n\n    }\n\n    /*  Para el boton singin*/\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignup: !prevState.isSignup};\n        })\n\n    }\n\n\n    render () {\n         /* Para el nuevo state con muchos object */\n         const formElementsArray= [];\n         for (let key in this.state.controls){ /* Key es el identificador de las llaves de los object que estan en el this.state, name, street, zip code etc. */\n \n             formElementsArray.push({\n                 id: key,\n                 config: this.state.controls[key]\n             });\n         }\n\n         let form = formElementsArray.map( formElement => (\n             <Input \n                key={formElement.id}\n                elementType={formElement.config.elementType} \n                elementConfig={formElement.config.elementConfig}\n                defaultValue={formElement.config.value}\n                valid={formElement.config.valid} /* para dar css en el archivo input que muestre de un color los input cuando esten false y cuando esten true de otro color */\n                shouldValidate= {formElement.config.validation} /* Para saber que el ultimo object no tiene regla porque es un menu desplegable. */\n                touched = {formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\n            />\n\n         ));\n\n         /* spinner */\n         if (this.props.loading){\n             form = <Spinner />\n         };\n\n         /* Error */\n         let errorMessage = null;\n         if (this.props.error){\n             errorMessage = (\n                 /* .message solo esta disponible porque estamos utilizando el error que proviene de firebase */\n                 <p>{this.props.error.message}</p>\n             );    \n         }\n\n         /* Redirect para cuando e usuario le de click a authenticated*/\n         let authRedirect = null;\n         if (this.props.isAuthenticated) {\n            authRedirect= <Redirect to={this.props.authRedirectPath} /> \n         }\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\" > SUBMIT  </Button>   \n                </form>\n                <Button \n                    clicked= {this.switchAuthModeHandler} /* clicked viene del archivo Button.js */\n                    btnType=\"Danger\"> SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'} </Button>\n            </div>\n\n        );\n    }\n    \n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading, /* Viene del reducer auth */\n        error: state.auth.error,\n        /* Si el token no es nullo , estamos authenticados */\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath /* viene del archivo reducer / auth */\n\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n\n    };\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\n/* Redux */\nimport { connect } from 'react-redux';\n\n/* Actions */\nimport * as actions from '../../../store/actions/index';\n\nclass Logout extends Component {\n\n    componentDidMount () {\n        this.props.onLogout();\n    }\n\n    render(){\n        return <Redirect to=\"/\"/>;\n    }\n} \n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogout: () => dispatch(actions.logout())\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(Logout);","import React from 'react';\n\nimport classes from './Order.css';\n\n\nconst order = (props) => {\n\n    /* Tranformar los ingredientes */\n    const ingredients = [];\n\n    for (let ingredientName in props.ingredients ){\n\n        ingredients.push(\n            { \n                name: ingredientName,\n                amount: props.ingredients[ingredientName] /* amount para almacenar la cantidad */\n            }\n        ); /* la llave ingredientName hace referencia a la llave que seria los ingredients , bacon , cheese etc y props.ingredients[ingredientName] hace referencia al valor osea la cantidad ejemplo cheese:1 , bacon:3 */\n    } /* props.ingredients viene del archivo Orders.js */\n\n    /* Dar salidas a los ingredientes */\n    const ingredientOutput = ingredients.map(ig => {\n    return <span \n        style={{\n                textTransform: 'capitalize',\n                display: 'inline-block',\n                margin: '0 8px ',\n                border: '1px solid #ccc',\n                padding: '5px'}}\n        key={ig.name} >{ig.name} ({ig.amount})</span>;\n    });\n\n    return (\n    \n        <div className={classes.Order}>\n        <p>Ingredients: {ingredientOutput}</p>\n            <p>Price: <strong>USD {Number.parseFloat(props.price).toFixed(2)}</strong></p> {/* props.price viene del archivo orders.js // parseFloat es oara transformar todo el string a un numero*/}\n        </div>\n\n    );\n    \n};\n\n/* https://lodash.com/docs/4.17.15 */\n/* letterresult = []\nfor (let letters in props.data){\n\n    letterresult.push(props.data[letters][0].b.c)\n\n} */\n\n\nexport default order;","import React, { Component } from 'react';\n\nimport Order from '../../components/Order/Order';\n\nimport axios from '../../axios-orders';\n\nimport withErrorHanlder from '../../hoc/withErrorHandler/withErrorHandler';\n\nimport * as actions from '../../store/actions/index';\n\nimport { connect } from 'react-redux';\n\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nclass Orders extends Component {\n\n\n    componentDidMount () {\n\n        this.props.onGetOrders(this.props.token, this.props.userId);\n    }\n\n       \n\n    render (){\n        let spinner = !this.props.loading ? null : <Spinner />;\n        return (\n            \n            <div>\n                {spinner}\n                {/* outputting the orders */}\n                {this.props.orders.map(order => (\n                    <Order \n                        key={order.id}\n                        ingredients={order.ingredients} \n                        price={order.price}\n                    />\n                ))}\n            </div>\n\n        );\n    }\n\n};\n\nconst mapStateToProps = state => {\n    return {\n        orders: state.order.orders,\n        loading: state.order.loading,\n        token: state.auth.token,\n        /* Para que traiga las ordenes por medio del userId */\n        userId: state.auth.userId\n    }\n\n};\n\nconst mapDispacthToProps = dispatch => {\n    return{\n        onGetOrders: (token, userId) => dispatch(actions.getOrders(token, userId))\n    }\n}\n\n\n\n\nexport default connect(mapStateToProps, mapDispacthToProps)(withErrorHanlder(Orders, axios));","import React, { Component } from 'react';\nimport { Route, Switch, withRouter, Redirect} from 'react-router-dom';\n\nimport Layout from './hoc/Layout/Layout';\nimport BurgerBuilder from './containers/BurgerBuilder/BurgerBuilder';\nimport Checkout from './containers/Checkout/Checkout';\n\n/* Athentication */\nimport Auth from './containers/Auth/Auth';\nimport Logout from './containers/Auth/Logout/Logout';\n\nimport Orders from './containers/Orders/Orders';\n\nimport { connect } from 'react-redux';\nimport * as actions from './store/actions/index';\n\nclass App extends Component{\n\n  componentDidMount () {\n    this.props.onAutoLogin();\n  }\n\n  render() {\n\n    /* Para hacer la configuracion de que si no esta authenticado el usuario no puede ir a la routes orders hasta ue este authenticado y si le da orders lo va a redirect a home */\n    let routes = (\n      <Switch>\n        <Route  path=\"/auth\" component={Auth} />\n        <Route path=\"/\" exact component={BurgerBuilder} />\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n    /* Si esta authenticado */\n    if (this.props.isAuthenticated) {\n      routes = (\n        <Switch>\n            {/* Uthenticate */}\n            <Route path=\"/logout\" component={Logout} />\n            <Route path=\"/auth\" component={Auth} />\n            <Route path=\"/Checkout\" component={Checkout} />\n            <Route path=\"/orders\" component={Orders} /> {/* el boton para que se direccione aqui esta en el archivo NavigationItems.js */}\n            <Route path=\"/\" exact component={BurgerBuilder} />\n            <Redirect to=\"/\" />\n            \n      </Switch>\n      );\n\n    }\n\n    return (\n      <div>\n        <Layout>\n            {routes}\n        </Layout>\n      \n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.token !== null\n  };\n};\n\n/* PARA EL DISPATCH DE ACTIONS/AUTH */\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAutoLogin: () => dispatch (actions.authCheckState())\n\n  }\n}\n\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from \"../actions/actionTypes\";\n\nconst initialState = {\n    ingredients: null,\n    totalPrice: 4, \n    error: false,\n    /* redirecting the user to the checkout page */\n    building: false\n};\n\nconst INGREDIENT_PRICES = {\n    salad: 0.5,\n    cheese: 0.4,\n    meat: 1.3,\n    bacon: 0.7\n};\n\nconst reducer  = (state= initialState, action) => {\n\n    switch (action.type) {\n        case actionTypes.ADD_INGREDIENT:\n            return {\n                ...state,\n                ingredients: {\n                    ...state.ingredients,\n                    [action.ingredientName]: state.ingredients[action.ingredientName] + 1 /* en el primer [action.ingredientName] recibimos la llave de los ingredients bacon, salad, etc y luego de los : recibimos el valor + 1 */\n                },\n                /* Actualizar el precio */\n                totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingredientName],\n                building: true\n\n            };\n        case actionTypes.REMOVE_INGREDIENT:\n            return {\n                ...state,\n                ingredients: {\n                    ...state.ingredients,\n                    [action.ingredientName]: state.ingredients[action.ingredientName] - 1 /* en el primer [action.ingredientName] recibimos la llave de los ingredients bacon, salad, etc y luego de los : recibimos el valor + 1 */\n                },\n                /* Actualizar el precio */\n                totalPrice: state.totalPrice - INGREDIENT_PRICES[action.ingredientName],\n                building: true\n\n            };\n            /* Llamamos a los ingredientes establecidos */\n        case actionTypes.SET_INGREDIENTS:\n            return{\n                ...state,\n                ingredients: {\n                    salad: action.ingredients.salad,\n                    bacon: action.ingredients.bacon,\n                    cheese: action.ingredients.cheese,\n                    meat: action.ingredients.meat\n                },\n                totalPrice: 4,\n                error: false,\n                building: false\n\n            };\n        case actionTypes.FETCH_INGREDIENTS_FAILED:\n            return{\n                ...state,\n                error: true\n            }\n\n        default: \n            return state;\n    }\n};\n\n\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    orders: [],\n    loading: false,\n    purchased: false,\n    error: null\n}\n\n\nconst reducer  = (state= initialState , action) => {\n\n    switch (action.type) {\n\n        case actionTypes.PURCHASE_INIT:\n            return {\n                ...state,\n                purchased: false\n\n            };\n\n        case actionTypes.PURCHASE_BURGER_START:\n            return {\n                ...state,\n                loading: true\n            };\n\n        case actionTypes.PURCHASE_BURGER_SUCCESS: \n        const newOrder = {\n            ...action.orderData,\n            id: action.orderId\n        }\n         return {\n             ...state,\n             loading: false,\n             purchased:true,\n             orders: state.orders.concat(newOrder)\n         };\n        case actionTypes.PURCHASE_BURGER_FAIL:\n            return {\n                ...state,\n                loading: false\n\n            };\n            /* Orders */\n        case actionTypes.ORDERS_GET_SUCESS:\n            return {\n                ...state,\n                loading: false,\n                orders: action.orders\n            };\n        case actionTypes.ORDERS_GET_FAIL:\n            return{\n                ...state,\n                error: action.error,\n                loading: false\n            }     \n        default:\n            return state;\n    }\n};\n\n\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\n\n\nconst initialState = {\n    token: null,\n    userId: null,\n    error: null,\n    loading: false,\n    /* redirecting the user to the checkout page */\n    authRedirect: '/'\n};\n\n\nconst reducer = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case actionTypes.AUTH_START:\n            return {\n                ...state,\n                error: null,\n                loading: true\n            };\n\n        case actionTypes.AUTH_SUCESS:\n            return {\n                ...state,\n                token: action.idToken,\n                userId: action.userId,\n                error: null,\n                loading: false\n\n            };\n        case actionTypes.AUTH_FAIL:\n            return {\n                ...state,\n                error: action.error,\n                loading: false\n            };\n        case actionTypes.AUTH_LOGOUT:\n            return {\n                ...state,\n                token: null,\n                userId: null\n            }\n        /* redirecting the user to the checkout page */\n        case actionTypes.SET_AUTH_REDIRECT_PATH:\n            return {\n                ...state,\n                authRedirectPath: action.path\n            }\n\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\n/* Para envolve la aplicacion */\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/* Para envolver la aplicacion-- osea para conectar redux con react */\nimport { Provider } from 'react-redux'; \n\n/* Importando thunk que es un middleware que nos permite codigo asincrono */\nimport thunk from 'redux-thunk';\n\n/* Creando el store */\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\n/* importando reducer.js */\nimport burgerBuilderReducer from './store/reducers/burgerBuilder';\n\n/* CombineReducers */\nimport orderReducer from './store/reducers/order';\n\n/* Reducer auth */\nimport authReducer from './store/reducers/auth';\n\n/* thunk  */\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n/* Combine reducer */\nconst rootReducer =  combineReducers({\n    burgerBuilder: burgerBuilderReducer,\n    order: orderReducer,\n    auth: authReducer\n})\n\n                                    /* PARA SABER EL ESTADO DE NUESTRA APLICACION CON REDUX DEVTOOLS */\nconst store = createStore(rootReducer, composeEnhancers( \n    applyMiddleware(thunk)\n));\n\nconst app = (\n\n    <Provider store={store}>\n        <BrowserRouter>\n\n             <App />\n    \n        </BrowserRouter>\n    </Provider>\n\n);\n\nReactDOM.render( app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}